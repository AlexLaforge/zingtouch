[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ZingTouch.js",
    "memberof": null,
    "longname": "src/ZingTouch.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file ZingTouch.js\n * Main object containing API methods and Gesture constructors\n */\n\nimport Region from './core/classes/Region.js';\nimport Gesture from './gestures/Gesture.js';\nimport Expand from './gestures/Expand.js';\nimport Pan from './gestures/Pan.js';\nimport Pinch from './gestures/Pinch.js';\nimport Rotate from './gestures/Rotate.js';\nimport Swipe from './gestures/Swipe.js';\nimport Tap from './gestures/Tap.js';\n\n/**\n * The global API interface for ZingTouch. Contains a constructor for the Region Object,\n * and constructors for each predefined Gesture.\n * @type {Object}\n * @namespace ZingTouch\n */\nvar ZingTouch = {\n  _regions: [],\n\n  //Constructors\n  Gesture: Gesture,\n  Expand: Expand,\n  Pan: Pan,\n  Pinch: Pinch,\n  Rotate: Rotate,\n  Swipe: Swipe,\n  Tap: Tap,\n  Region: function (element, capture, preventDefault) {\n    var id = ZingTouch._regions.length;\n    var region = new Region(element, capture, preventDefault, id);\n    ZingTouch._regions.push(region);\n    return region;\n  }\n};\n\nexport default ZingTouch;\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ZingTouch",
    "memberof": "src/ZingTouch.js",
    "longname": "src/ZingTouch.js~ZingTouch",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/ZingTouch.js",
    "importStyle": "ZingTouch",
    "description": "The global API interface for ZingTouch. Contains a constructor for the Region Object,\nand constructors for each predefined Gesture.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": "ZingTouch"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/arbiter.js",
    "memberof": null,
    "longname": "src/core/arbiter.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file arbiter.js\n * Contains logic for the dispatcher\n */\n\nimport dispatcher from './dispatcher.js';\nimport Input from './classes/Input.js';\nimport interpreter from './interpreter.js';\nimport util from './util.js';\n\n/**\n * Function that handles event flow, negotiating with the interpreter, and dispatcher.\n * 1. Receiving all touch events in the window.\n * 2. Determining which gestures are linked to the target element.\n * 3. Negotiating with the Interpreter what event should occur.\n * 4. Sending events to the dispatcher to emit events to the target.\n * @param {Event} event - The event emitted from the window object.\n * @param {Object} region - The region object of the current listener.\n */\nfunction arbiter(event, region) {\n  var state = region.state;\n\n  /*\n   Return if a gesture is not in progress and won't be. Also catches the case where a previous\n   event is in a partial state (2 finger pan, waits for both inputs to reach touchend)\n   */\n  if (state.inputs.length === 0 && util.normalizeEvent(event.type) !== 'start') {\n    return;\n  }\n\n  /*\n   Check for 'stale' or events that lost focus (e.g. a pan goes off screen/off region.\n   Does not affect mobile devices.\n   */\n  if (typeof event.buttons !== 'undefined' && util.normalizeEvent(event.type) !== 'end' && event.buttons === 0) {\n    state.resetInputs();\n    return;\n  }\n\n  //Update the state with the new events. If the event is stopped, return;\n  if (!state.updateInputs(event, region.element)) {\n    return;\n  }\n\n  //Retrieve the initial target from any one of the inputs\n  var bindings = state.retrieveBindingsByInitialPos();\n  if (bindings.length > 0) {\n    if (region.preventDefault) {\n      util.setMSPreventDefault(region.element);\n      event.preventDefault ? event.preventDefault() : (event.returnValue = false);\n    } else {\n      util.removeMSPreventDefault(region.element);\n    }\n\n    var toBeDispatched = {};\n    var gestures = interpreter(bindings, event, state);\n\n    //Determine the deepest path index to emit the event from, to avoid duplicate events being fired.\n    gestures.forEach(gesture => {\n      //var id = (gesture.binding.gesture.id) ? gesture.binding.gesture.id : gesture.binding.gesture.type;\n      var id = gesture.binding.gesture.id;\n      if (toBeDispatched[id]) {\n        var path = util.getPropagationPath(event);\n        if (util.getPathIndex(path, gesture.binding.element) < util.getPathIndex(path, toBeDispatched[id].binding.element)) {\n          toBeDispatched[id] = gesture;\n        }\n      } else {\n        toBeDispatched[id] = gesture;\n      }\n    });\n\n    Object.keys(toBeDispatched).forEach(index => {\n      var gesture = toBeDispatched[index];\n      dispatcher(gesture.binding, gesture.data, gesture.events);\n    });\n  }\n\n  var endCount = 0;\n  state.inputs.forEach(input => {\n    if (input.getCurrentEventType() === 'end') {\n      endCount++;\n    }\n  });\n\n  if (endCount === state.inputs.length) {\n    state.resetInputs();\n  }\n\n}\n/*arbiter*/\n\nexport default arbiter;\n"
  },
  {
    "__docId__": 3,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "arbiter",
    "memberof": "src/core/arbiter.js",
    "longname": "src/core/arbiter.js~arbiter",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/arbiter.js",
    "importStyle": "arbiter",
    "description": "Function that handles event flow, negotiating with the interpreter, and dispatcher.\n1. Receiving all touch events in the window.\n2. Determining which gestures are linked to the target element.\n3. Negotiating with the Interpreter what event should occur.\n4. Sending events to the dispatcher to emit events to the target.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event emitted from the window object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "region",
        "description": "The region object of the current listener."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/classes/Binder.js",
    "memberof": null,
    "longname": "src/core/classes/Binder.js",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "content": "/**\n * @file Binder.js\n */\n\n/**\n * A chainable object that contains a single element to be bound upon.\n * Called from ZingTouch.bind(), and is used to chain over gesture callbacks.\n * @class\n */\nclass Binder {\n  /**\n   * Constructor function for the Binder class.\n   * @param {Element} element - The element to bind gestures to.\n   * @param {Boolean} bindOnce - Option to bind once and only emit the event once.\n   * @param {Object} state - The state of the Region that is being bound to.\n   * @returns {Object} - Returns 'this' to be chained over and over again.\n   */\n  constructor(element, bindOnce, state) {\n    /**\n     * The element to bind gestures to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    Object.keys(state.registeredGestures).forEach((key) => {\n      this[key] = (handler, capture) => {\n        state.addBinding(this.element, key, handler, capture, bindOnce);\n        return this;\n      };\n    });\n\n  }\n  /*constructor*/\n}\n\nexport default Binder;\n"
  },
  {
    "__docId__": 5,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Binder",
    "memberof": "src/core/classes/Binder.js",
    "longname": "src/core/classes/Binder.js~Binder",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/classes/Binder.js",
    "importStyle": "Binder",
    "description": "A chainable object that contains a single element to be bound upon.\nCalled from ZingTouch.bind(), and is used to chain over gesture callbacks.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 6,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/core/classes/Binder.js~Binder",
    "longname": "src/core/classes/Binder.js~Binder#constructor",
    "access": null,
    "description": "Constructor function for the Binder class.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Returns 'this' to be chained over and over again."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to bind gestures to."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bindOnce",
        "description": "Option to bind once and only emit the event once."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state of the Region that is being bound to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns 'this' to be chained over and over again."
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/core/classes/Binder.js~Binder",
    "longname": "src/core/classes/Binder.js~Binder#element",
    "access": null,
    "description": "The element to bind gestures to.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 8,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/classes/Binding.js",
    "memberof": null,
    "longname": "src/core/classes/Binding.js",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "content": "/**\n * @file Binding.js\n */\n\n/**\n * Responsible for creating a binding between an element and a gesture.\n * @class Binding\n */\nclass Binding {\n  /**\n   * Constructor function for the Binding class.\n   * @param {Element} element - The element to associate the gesture to.\n   * @param {Gesture} gesture - A instance of the Gesture type.\n   * @param {Function} handler - The function handler to execute when a gesture is recognized\n   * on the associated element.\n   * @param {Boolean} [capture=false] - A boolean signifying if the event is to be emitted during\n   * the capture or bubble phase.\n   * @param {Boolean} [bindOnce=false] - A boolean flag used for the bindOnce syntax.\n   */\n  constructor(element, gesture, handler, capture, bindOnce) {\n    /**\n     * The element to associate the gesture to.\n     * @type {Element}\n     */\n    this.element = element;\n    /**\n     * A instance of the Gesture type.\n     * @type {Gesture}\n     */\n    this.gesture = gesture;\n    /**\n     *  The function handler to execute when a gesture is recognized on the associated element.\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     *  A boolean signifying if the event is to be emitted during the capture or bubble phase.\n     * @type {Boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * A boolean flag used for the bindOnce syntax.\n     * @type {Boolean}\n     */\n    this.bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n\n  }\n  /*constructor*/\n}\n\nexport default Binding;\n"
  },
  {
    "__docId__": 9,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Binding",
    "memberof": "src/core/classes/Binding.js",
    "longname": "src/core/classes/Binding.js~Binding",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/classes/Binding.js",
    "importStyle": "Binding",
    "description": "Responsible for creating a binding between an element and a gesture.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Binding"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 10,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/core/classes/Binding.js~Binding",
    "longname": "src/core/classes/Binding.js~Binding#constructor",
    "access": null,
    "description": "Constructor function for the Binding class.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to associate the gesture to."
      },
      {
        "nullable": null,
        "types": [
          "Gesture"
        ],
        "spread": false,
        "optional": false,
        "name": "gesture",
        "description": "A instance of the Gesture type."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The function handler to execute when a gesture is recognized\non the associated element."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "capture",
        "description": "A boolean signifying if the event is to be emitted during\nthe capture or bubble phase."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "bindOnce",
        "description": "A boolean flag used for the bindOnce syntax."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/core/classes/Binding.js~Binding",
    "longname": "src/core/classes/Binding.js~Binding#element",
    "access": null,
    "description": "The element to associate the gesture to.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gesture",
    "memberof": "src/core/classes/Binding.js~Binding",
    "longname": "src/core/classes/Binding.js~Binding#gesture",
    "access": null,
    "description": "A instance of the Gesture type.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Gesture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "handler",
    "memberof": "src/core/classes/Binding.js~Binding",
    "longname": "src/core/classes/Binding.js~Binding#handler",
    "access": null,
    "description": " The function handler to execute when a gesture is recognized on the associated element.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "capture",
    "memberof": "src/core/classes/Binding.js~Binding",
    "longname": "src/core/classes/Binding.js~Binding#capture",
    "access": null,
    "description": " A boolean signifying if the event is to be emitted during the capture or bubble phase.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bindOnce",
    "memberof": "src/core/classes/Binding.js~Binding",
    "longname": "src/core/classes/Binding.js~Binding#bindOnce",
    "access": null,
    "description": "A boolean flag used for the bindOnce syntax.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/classes/Input.js",
    "memberof": null,
    "longname": "src/core/classes/Input.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file Input.js\n */\n\nimport ZingEvent from './ZingEvent.js';\nimport util from './../util.js';\n\n/**\n * Tracks a single input and contains information about the current, previous, and initial events.\n * Contains the progress of each Input and it's associated gestures.\n * @class Input\n */\nclass Input {\n\n  /**\n   * Constructor function for the Input class.\n   * @param {Event} event - The Event object from the window\n   * @param {Number} [identifier=0] - The identifier for each input event\n   * (taken from event.changedTouches)\n   */\n  constructor(event, identifier) {\n    var currentEvent = new ZingEvent(event, identifier);\n\n    /**\n     * Holds the initial event object. A touchstart/mousedown event.\n     * @type {ZingEvent}\n     */\n    this.initial = currentEvent;\n\n    /**\n     * Holds the most current event for this Input, disregarding any other past, current, and\n     * future events that other Inputs participate in. e.g. This event ended in an 'end' event,\n     * but another Input is still participating in events -- this will not be updated in such cases.\n     * @type {ZingEvent}\n     */\n    this.current = currentEvent;\n\n    /**\n     * Holds the previous event that took place.\n     * @type {ZingEvent}\n     */\n    this.previous = currentEvent;\n\n    /**\n     * Refers to the event.touches index, or 0 if a simple mouse event occurred.\n     * @type {Number}\n     */\n    this.identifier = (typeof identifier !== 'undefined') ? identifier : 0;\n\n    /**\n     * Stores internal state between events for each gesture based off of the gesture's id.\n     * @type {Object}\n     */\n    this.progress = {};\n  }\n  /*constructor*/\n\n  /**\n   * Receives an input, updates the internal state of what the input has done next.\n   * @param {Event} event - The event object to wrap with a ZingEvent.\n   * @param {Number} touchIdentifier - The index of inputs (usually from event.touches)\n   */\n  update(event, touchIdentifier) {\n    this.previous = this.current;\n    this.current = new ZingEvent(event, touchIdentifier);\n  }\n  /*update*/\n\n  /**\n   * Returns the progress of the specified gesture.\n   * @param {String} id - The identifier for each unique Gesture's progress.\n   * @returns {Object} - The progress of the gesture. Creates an empty object if no progress\n   * has begun.\n   */\n  getGestureProgress(id) {\n    if (!this.progress[id]) {\n      this.progress[id] = {};\n    }\n\n    return this.progress[id];\n  }\n  /*getGestureProgress*/\n\n  /**\n   * Returns the normalized current Event's type.\n   * @returns {String} The current event's type ( start | move | end )\n   */\n  getCurrentEventType() {\n    return this.current.type;\n  }\n  /*getCurrentEventType*/\n\n  /**\n   * Resets a progress/state object of the specified gesture.\n   * @param {String} id - The identifier of the specified gesture\n   */\n  resetProgress(id) {\n    this.progress[id] = {};\n  }\n  /*resetProgress*/\n\n}\n\nexport default Input;\n"
  },
  {
    "__docId__": 17,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Input",
    "memberof": "src/core/classes/Input.js",
    "longname": "src/core/classes/Input.js~Input",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/classes/Input.js",
    "importStyle": "Input",
    "description": "Tracks a single input and contains information about the current, previous, and initial events.\nContains the progress of each Input and it's associated gestures.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Input"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 18,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#constructor",
    "access": null,
    "description": "Constructor function for the Input class.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The Event object from the window"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "identifier",
        "description": "The identifier for each input event\n(taken from event.changedTouches)"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "initial",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#initial",
    "access": null,
    "description": "Holds the initial event object. A touchstart/mousedown event.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "ZingEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "current",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#current",
    "access": null,
    "description": "Holds the most current event for this Input, disregarding any other past, current, and\nfuture events that other Inputs participate in. e.g. This event ended in an 'end' event,\nbut another Input is still participating in events -- this will not be updated in such cases.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "ZingEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "previous",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#previous",
    "access": null,
    "description": "Holds the previous event that took place.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "ZingEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "identifier",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#identifier",
    "access": null,
    "description": "Refers to the event.touches index, or 0 if a simple mouse event occurred.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "progress",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#progress",
    "access": null,
    "description": "Stores internal state between events for each gesture based off of the gesture's id.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#update",
    "access": null,
    "description": "Receives an input, updates the internal state of what the input has done next.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event object to wrap with a ZingEvent."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "touchIdentifier",
        "description": "The index of inputs (usually from event.touches)"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "previous",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#previous",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "current",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#current",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getGestureProgress",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#getGestureProgress",
    "access": null,
    "description": "Returns the progress of the specified gesture.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The progress of the gesture. Creates an empty object if no progress\nhas begun."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The identifier for each unique Gesture's progress."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The progress of the gesture. Creates an empty object if no progress\nhas begun."
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getCurrentEventType",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#getCurrentEventType",
    "access": null,
    "description": "Returns the normalized current Event's type.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} The current event's type ( start | move | end )"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The current event's type ( start | move | end )"
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resetProgress",
    "memberof": "src/core/classes/Input.js~Input",
    "longname": "src/core/classes/Input.js~Input#resetProgress",
    "access": null,
    "description": "Resets a progress/state object of the specified gesture.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The identifier of the specified gesture"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/classes/Region.js",
    "memberof": null,
    "longname": "src/core/classes/Region.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file Region.js\n */\n\nimport Binder from './Binder.js';\nimport Binding from './Binding.js';\nimport Gesture from './../../gestures/Gesture.js';\nimport arbiter from './../arbiter.js';\nimport State from './State.js';\nimport util from './../util.js';\n\n/**\n * Allows the user to specify a region to capture all events to feed ZingTouch into. This can be as narrow as\n * the element itself, or as big as the document itself. The more specific an area, the better performant the\n * overall application will perform. Contains API methods to bind/unbind specific elements\n * to corresponding gestures. Also contains the ability to register/unregister new gestures.\n * @class Region\n */\nclass Region {\n\n  /**\n   * Constructor function for the Region class.\n   * @param {Element} element - The element to capture all window events in that region to feed into ZingTouch.\n   * @param {boolean} [capture=false] - Whether the region listens for captures or bubbles.\n   * @param {boolean} [preventDefault=true] - Whether the default browser functionality should be disabled;\n   * @param {Number} id - The id of the region, assigned by the ZingTouch object.\n   */\n  constructor(element, capture, preventDefault, id) {\n\n    /**\n     * The identifier for the Region. This is assigned by the ZingTouch object and is used to hash gesture ids\n     * for uniqueness.\n     * @type {Number}\n     */\n    this.id = id;\n\n    /**\n     * The element being bound to.\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     * @type {boolean}\n     */\n    this.capture = (typeof capture !== 'undefined') ? capture : false;\n\n    /**\n     * Boolean to disable browser functionality such as scrolling and zooming over the region\n     * @type {boolean}\n     */\n    this.preventDefault = (typeof preventDefault !== 'undefined') ? preventDefault : true;\n\n    /**\n     * The internal state object for a Region. Keeps track of registered gestures, inputs, and events.\n     * @type {State}\n     */\n    this.state = new State(id);\n\n    var eventNames = [];\n    if (window.PointerEvent) {\n      eventNames = ['pointerdown', 'pointermove', 'pointerup'];\n    } else {\n      eventNames = ['mousedown', 'mousemove', 'mouseup', 'touchstart', 'touchmove', 'touchend'];\n    }\n\n    //Bind detected browser events to the region element.\n    eventNames.map((name) => {\n      element.addEventListener(name, (e) => {\n        arbiter(e, this);\n      }, this.capture);\n    });\n  }\n\n  /**\n   * Bind an element to a registered/unregistered gesture with multiple function signatures.\n   * @example\n   * bind(element) - chainable\n   * @example\n   * bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} [gesture] - Gesture key, or a Gesture object.\n   * @param {Function} [handler] - The function to execute when an event is emitted.\n   * @param {Boolean} [capture] - capture/bubble\n   * @param {Boolean} [bindOnce = false] - Option to bind once and only emit the event once.\n   * @returns {Object} - a chainable object that has the same function as bind.\n   */\n  bind(element, gesture, handler, capture, bindOnce) {\n    if (!element || (element && !element.tagName)) {\n      throw 'Bind must contain an element';\n    }\n\n    bindOnce = (typeof bindOnce !== 'undefined') ? bindOnce : false;\n    if (!gesture) {\n      return new Binder(element, bindOnce, this.state);\n    } else {\n      this.state.addBinding(element, gesture, handler, capture, bindOnce);\n    }\n  }\n\n  /*bind*/\n\n  /**\n   * Bind an element and sets up actions to remove the binding once it has been emitted\n   * for the first time.\n   * 1. bind(element) - chainable\n   * 2. bind(element, gesture, handler, [capture])\n   * @param {Element} element - The element object.\n   * @param {String|Object} gesture - Gesture key, or a Gesture object.\n   * @param {Function} handler - The function to execute when an event is emitted.\n   * @param {Boolean} capture - capture/bubble\n   * @returns {Object} - a chainable object that has the same function as bind.\n   */\n  bindOnce(element, gesture, handler, capture) {\n    this.bind(element, gesture, handler, capture, true);\n  }\n\n  /*bindOnce*/\n\n  //noinspection JSMethodCanBeStatic\n  /**\n   * Unbinds an element from either the specified gesture or all if no element is specified.\n   * @param {Element} element -The element to remove.\n   * @param {String | Object} [gesture] - A String representing the gesture, or the actual object being used.\n   * @returns {Array} - An array of Bindings that were unbound to the element;\n   */\n  unbind(element, gesture) {\n    var bindings = this.state.retrieveBindingsByElement(element);\n    var unbound = [];\n\n    bindings.forEach((binding) => {\n      if (gesture) {\n        if (typeof gesture === 'string' && this.state.registeredGestures[gesture]) {\n          var registeredGesture = this.state.registeredGestures[gesture];\n          if (registeredGesture.id === binding.gesture.id) {\n            element.removeEventListener(binding.gesture.getId(), binding.handler, binding.capture);\n            unbound.push(binding);\n          }\n        }\n      } else {\n        element.removeEventListener(binding.gesture.getId(), binding.handler, binding.capture);\n        unbound.push(binding);\n      }\n    });\n\n    return unbound;\n  }\n\n  /*unbind*/\n\n  /**\n   * Registers a new gesture with an assigned key\n   * @param {String} key - The key used to register an element to that gesture\n   * @param {Gesture} gesture - A gesture object\n   */\n  register(key, gesture) {\n    if (typeof key !== 'string') {\n      throw new Error('Parameter key is an invalid string');\n    }\n\n    if (!gesture instanceof Gesture) {\n      throw new Error('Parameter gesture is an invalid Gesture object');\n    }\n\n    gesture.setType(key);\n    this.state.registerGesture(gesture, key);\n  }\n\n  /*register*/\n\n  /**\n   * Un-registers a gesture from the Region's state such that it is no longer emittable.\n   * Unbinds all events that were registered with the type.\n   * @param {String|Object} key - Gesture key that was used to register the object\n   * @returns {Object} - The Gesture object that was unregistered or null if it could not be found.\n   */\n  unregister(key) {\n    this.state.bindings.forEach((binding) => {\n      if (binding.gesture.getType() === key) {\n        binding.element.removeEventListener(binding.gesture.getId(),\n          binding.handler, binding.capture);\n      }\n    });\n\n    var registeredGesture = this.state.registeredGestures[key];\n    delete this.state.registeredGestures[key];\n    return registeredGesture;\n  }\n}\n\nexport default Region;\n"
  },
  {
    "__docId__": 31,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Region",
    "memberof": "src/core/classes/Region.js",
    "longname": "src/core/classes/Region.js~Region",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/classes/Region.js",
    "importStyle": "Region",
    "description": "Allows the user to specify a region to capture all events to feed ZingTouch into. This can be as narrow as\nthe element itself, or as big as the document itself. The more specific an area, the better performant the\noverall application will perform. Contains API methods to bind/unbind specific elements\nto corresponding gestures. Also contains the ability to register/unregister new gestures.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Region"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 32,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#constructor",
    "access": null,
    "description": "Constructor function for the Region class.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to capture all window events in that region to feed into ZingTouch."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "capture",
        "description": "Whether the region listens for captures or bubbles."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "preventDefault",
        "description": "Whether the default browser functionality should be disabled;"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the region, assigned by the ZingTouch object."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#id",
    "access": null,
    "description": "The identifier for the Region. This is assigned by the ZingTouch object and is used to hash gesture ids\nfor uniqueness.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#element",
    "access": null,
    "description": "The element being bound to.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "capture",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#capture",
    "access": null,
    "description": "Whether the region listens for captures or bubbles.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 36,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "preventDefault",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#preventDefault",
    "access": null,
    "description": "Boolean to disable browser functionality such as scrolling and zooming over the region",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 37,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#state",
    "access": null,
    "description": "The internal state object for a Region. Keeps track of registered gestures, inputs, and events.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "State"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bind",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#bind",
    "access": null,
    "description": "Bind an element to a registered/unregistered gesture with multiple function signatures.",
    "examples": [
      "bind(element) - chainable",
      "bind(element, gesture, handler, [capture])"
    ],
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - a chainable object that has the same function as bind."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element object."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "gesture",
        "description": "Gesture key, or a Gesture object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "handler",
        "description": "The function to execute when an event is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "capture",
        "description": "capture/bubble"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "bindOnce",
        "description": "= false] - Option to bind once and only emit the event once."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a chainable object that has the same function as bind."
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bindOnce",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#bindOnce",
    "access": null,
    "description": "Bind an element and sets up actions to remove the binding once it has been emitted\nfor the first time.\n1. bind(element) - chainable\n2. bind(element, gesture, handler, [capture])",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - a chainable object that has the same function as bind."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element object."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "gesture",
        "description": "Gesture key, or a Gesture object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The function to execute when an event is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "capture",
        "description": "capture/bubble"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a chainable object that has the same function as bind."
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unbind",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#unbind",
    "access": null,
    "description": "Unbinds an element from either the specified gesture or all if no element is specified.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - An array of Bindings that were unbound to the element;"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to remove."
      },
      {
        "nullable": null,
        "types": [
          "String ",
          " Object"
        ],
        "spread": false,
        "optional": true,
        "name": "gesture",
        "description": "A String representing the gesture, or the actual object being used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of Bindings that were unbound to the element;"
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "register",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#register",
    "access": null,
    "description": "Registers a new gesture with an assigned key",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key used to register an element to that gesture"
      },
      {
        "nullable": null,
        "types": [
          "Gesture"
        ],
        "spread": false,
        "optional": false,
        "name": "gesture",
        "description": "A gesture object"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unregister",
    "memberof": "src/core/classes/Region.js~Region",
    "longname": "src/core/classes/Region.js~Region#unregister",
    "access": null,
    "description": "Un-registers a gesture from the Region's state such that it is no longer emittable.\nUnbinds all events that were registered with the type.",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The Gesture object that was unregistered or null if it could not be found."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Gesture key that was used to register the object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The Gesture object that was unregistered or null if it could not be found."
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/classes/State.js",
    "memberof": null,
    "longname": "src/core/classes/State.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file State.js\n */\n\nimport Gesture from './../../gestures/Gesture.js';\nimport Expand from './../../gestures/Expand.js';\nimport Pan from './../../gestures/Pan.js';\nimport Pinch from './../../gestures/Pinch.js';\nimport Rotate from './../../gestures/Rotate.js';\nimport Swipe from './../../gestures/Swipe.js';\nimport Tap from './../../gestures/Tap.js';\nimport Binding from './Binding.js';\nimport Input from './Input.js';\nimport util from './../util.js';\n\nconst DEFAULT_MOUSE_ID = 0;\n\n/**\n * Creates an object related to a Region's state, and contains helper methods to update and clean up different\n * states.\n */\nclass State {\n\n  /**\n   * Constructor for the State class.\n   */\n  constructor(regionId) {\n\n    /**\n     * The id for the region this state is bound to.\n     * @type {String}\n     */\n    this.regionId = regionId;\n\n    /**\n     * An array of current and recently inactive Input objects related to a gesture.\n     * @type {Input}\n     */\n    this.inputs = [];\n\n    /**\n     * An array of Binding objects; The list of relations between elements, their gestures, and the handlers.\n     * @type {Binding}\n     */\n    this.bindings = [];\n\n    /**\n     * The number of gestures that have been registered with this state\n     * @type {Number}\n     */\n    this.numGestures = 0;\n\n    /**\n     * A key/value map all the registered gestures for the listener. Note: Can only have one gesture registered to one key.\n     * @type {Object}\n     */\n    this.registeredGestures = {};\n\n    this.registerGesture(new Expand(), 'expand');\n    this.registerGesture(new Pan(), 'pan');\n    this.registerGesture(new Rotate(), 'rotate');\n    this.registerGesture(new Pinch(), 'pinch');\n    this.registerGesture(new Swipe(), 'swipe');\n    this.registerGesture(new Tap(), 'tap');\n  }\n\n  /**\n   * Creates a new binding with the given element and gesture object.\n   * If the gesture object provided is unregistered, it's reference will be saved in as a binding to\n   * be later referenced.\n   * @param  {Element} element - The element the gesture is bound to.\n   * @param {String|Object} gesture  - Either a name of a registered gesture, or an unregistered\n   *  Gesture object.\n   * @param {Function} handler - The function handler to be called when the event is emitted.\n   * Used to bind/unbind.\n   * @param {Boolean} capture - Whether the gesture is to be detected in the capture of bubble\n   * phase. Used to bind/unbind.\n   * @param {Boolean} bindOnce - Option to bind once and only emit the event once.\n   */\n  addBinding(element, gesture, handler, capture, bindOnce) {\n    var boundGesture;\n\n    //Error type checking.\n    if (element && typeof element.tagName === 'undefined') {\n      throw new Error('Parameter element is an invalid object.');\n    }\n\n    if (typeof handler !== 'function') {\n      throw new Error('Parameter handler is invalid.');\n    }\n\n    if (typeof gesture === 'string' && Object.keys(this.registeredGestures).indexOf(gesture) === -1) {\n      throw new Error('Parameter ' + gesture + ' is not a registered gesture');\n    } else if (typeof gesture === 'object' && !(gesture instanceof Gesture)) {\n      throw new Error('Parameter for the gesture is not of a Gesture type');\n    }\n\n    if (typeof gesture === 'string') {\n      boundGesture = this.registeredGestures[gesture];\n    } else {\n      boundGesture = gesture;\n      this.assignGestureId(boundGesture);\n    }\n\n    this.bindings.push(new Binding(element, boundGesture, handler, capture, bindOnce));\n    element.addEventListener(boundGesture.getId(), handler, capture);\n  }\n\n  /*addBinding*/\n\n  /**\n   * Retrieves the Binding by which an element is associated to.\n   * @param {Element} element - The element to find bindings to.\n   * @returns {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByElement(element) {\n    var matches = [];\n    this.bindings.map(binding => {\n      if (binding.element === element) {\n        matches.push(binding);\n      }\n    });\n    return matches;\n  }\n\n  /*retrieveBindingsByElement*/\n\n  /**\n   * Retrieves all bindings based upon the initial X/Y position of the inputs.\n   * e.g. if gesture started on the correct target element, but diverted away into the correct region,\n   * this would still be valid.\n   * @returns {Array} - An array of Bindings to which that element is bound\n   */\n  retrieveBindingsByInitialPos() {\n    var matches = [];\n    this.bindings.forEach(binding => {\n      // Determine if at least one input is in the target element. They should all be in the region based upon a prior check\n      var inputsInside = this.inputs.filter(input => {\n        return util.isInside(input.initial.x, input.initial.y, binding.element);\n      });\n      if (inputsInside.length > 0) {\n        matches.push(binding);\n      }\n    });\n    return matches;\n  }\n\n  /* retrieveBindingsByInitialPos */\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   * @param {Event} event - The event being captured\n   * @param {Element} regionElement - The element where this current Region is bound to.\n   * @returns {boolean} - returns true for a successful update, false if the event is invalid.\n   */\n  updateInputs(event, regionElement) {\n    var identifier = DEFAULT_MOUSE_ID;\n    var eventType = (event.touches) ? 'TouchEvent' : (event.pointerType) ? 'PointerEvent' : 'MouseEvent';\n\n    switch (eventType) {\n      case 'TouchEvent':\n\n        //Return if all gestures did not originate from the same target\n        if (event.touches.length !== event.targetTouches.length) {\n          return false;\n        }\n\n        for (var index in event.changedTouches) {\n          if (event.changedTouches.hasOwnProperty(index) && util.isInteger((parseInt(index)))) {\n            identifier = event.changedTouches[index].identifier;\n            update(event, this, identifier, regionElement);\n          }\n        }\n\n        break;\n\n      case 'PointerEvent':\n        identifier = event.pointerId;\n        update(event, this, identifier, regionElement);\n        break;\n\n      case 'MouseEvent':\n      default:\n        update(event, this, DEFAULT_MOUSE_ID, regionElement);\n        break;\n    }\n    return true;\n\n    function update(event, state, identifier, regionElement) {\n      var eventType = util.normalizeEvent(event.type);\n      var input = findInputById(state.inputs, identifier);\n\n      //A starting input was not cleaned up properly and still exists.\n      if (eventType === 'start' && input) {\n        state.resetInputs();\n        return;\n      }\n\n      //An input has moved outside the region.\n      if (eventType !== 'start' && input && !util.isInside(input.current.x, input.current.y, regionElement)) {\n        state.resetInputs();\n        return;\n      }\n\n      if (eventType !== 'start' && !input) {\n        state.resetInputs();\n        return;\n      }\n\n      if (eventType === 'start') {\n        state.inputs.push(new Input(event, identifier));\n      } else {\n        input.update(event, identifier);\n      }\n    }\n  }\n\n  /* updateInputs */\n\n  /**\n   * Removes all inputs from the state, allowing for a new gesture.\n   */\n  resetInputs() {\n    this.inputs = [];\n  }\n\n  /* resetInputs */\n\n  /**\n   * Counts the number of active inputs at any given time.\n   * @returns {Number} - The number of active inputs.\n   */\n  numActiveInputs() {\n    var endType = this.inputs.filter(input => {\n      return input.current.type !== 'end';\n    });\n    return endType.length;\n  }\n\n  /* numActiveInputs */\n\n  /**\n   * Register the gesture to the current region.\n   * @param {Object} gesture - The gesture to register\n   * @param {String} key - The key to define the new gesture as.\n   */\n  registerGesture(gesture, key) {\n    this.assignGestureId(gesture);\n    this.registeredGestures[key] = gesture;\n  }\n\n  /* registerGesture */\n\n  /**\n   * Tracks the gesture to this state object to become uniquely identifiable.\n   * Useful for nested Regions.\n   * @param {Gesture} gesture - The gesture to track\n   */\n  assignGestureId(gesture) {\n    gesture.setId(this.regionId + '-' + this.numGestures++);\n  }\n\n  /* assignGestureId */\n\n}\n/**\n * Searches through each input, comparing the browser's identifier key for touches, to the stored one\n * in each input\n * @param {Array} inputs - The array of inputs in state.\n * @param {String} identifier - The identifier the browser has assigned.\n * @returns {Input} - The input object with the corresponding identifier, null if it did not find any.\n */\nfunction findInputById(inputs, identifier) {\n  for (var i = 0; i < inputs.length; i++) {\n    if (inputs[i].identifier === identifier) {\n      return inputs[i];\n    }\n  }\n\n  return null;\n}\n/* findInputById */\n\nexport default State;\n"
  },
  {
    "__docId__": 44,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_MOUSE_ID",
    "memberof": "src/core/classes/State.js",
    "longname": "src/core/classes/State.js~DEFAULT_MOUSE_ID",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/core/classes/State.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "findInputById",
    "memberof": "src/core/classes/State.js",
    "longname": "src/core/classes/State.js~findInputById",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/core/classes/State.js",
    "importStyle": null,
    "description": "Searches through each input, comparing the browser's identifier key for touches, to the stored one\nin each input",
    "lineNumber": 273,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Input} - The input object with the corresponding identifier, null if it did not find any."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of inputs in state."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "identifier",
        "description": "The identifier the browser has assigned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Input"
      ],
      "spread": false,
      "description": "The input object with the corresponding identifier, null if it did not find any."
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "State",
    "memberof": "src/core/classes/State.js",
    "longname": "src/core/classes/State.js~State",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/classes/State.js",
    "importStyle": "State",
    "description": "Creates an object related to a Region's state, and contains helper methods to update and clean up different\nstates.",
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 47,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#constructor",
    "access": null,
    "description": "Constructor for the State class.",
    "lineNumber": 27,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "regionId",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#regionId",
    "access": null,
    "description": "The id for the region this state is bound to.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inputs",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#inputs",
    "access": null,
    "description": "An array of current and recently inactive Input objects related to a gesture.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Input"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bindings",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#bindings",
    "access": null,
    "description": "An array of Binding objects; The list of relations between elements, their gestures, and the handlers.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Binding"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "numGestures",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#numGestures",
    "access": null,
    "description": "The number of gestures that have been registered with this state",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "registeredGestures",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#registeredGestures",
    "access": null,
    "description": "A key/value map all the registered gestures for the listener. Note: Can only have one gesture registered to one key.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addBinding",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#addBinding",
    "access": null,
    "description": "Creates a new binding with the given element and gesture object.\nIf the gesture object provided is unregistered, it's reference will be saved in as a binding to\nbe later referenced.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element the gesture is bound to."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "gesture",
        "description": "Either a name of a registered gesture, or an unregistered\n Gesture object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "The function handler to be called when the event is emitted.\nUsed to bind/unbind."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "capture",
        "description": "Whether the gesture is to be detected in the capture of bubble\nphase. Used to bind/unbind."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bindOnce",
        "description": "Option to bind once and only emit the event once."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "retrieveBindingsByElement",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#retrieveBindingsByElement",
    "access": null,
    "description": "Retrieves the Binding by which an element is associated to.",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - An array of Bindings to which that element is bound"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to find bindings to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of Bindings to which that element is bound"
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "retrieveBindingsByInitialPos",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#retrieveBindingsByInitialPos",
    "access": null,
    "description": "Retrieves all bindings based upon the initial X/Y position of the inputs.\ne.g. if gesture started on the correct target element, but diverted away into the correct region,\nthis would still be valid.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - An array of Bindings to which that element is bound"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of Bindings to which that element is bound"
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateInputs",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#updateInputs",
    "access": null,
    "description": "Updates the inputs with new information based upon a new event being fired.",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - returns true for a successful update, false if the event is invalid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event being captured"
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "regionElement",
        "description": "The element where this current Region is bound to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "returns true for a successful update, false if the event is invalid."
    },
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resetInputs",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#resetInputs",
    "access": null,
    "description": "Removes all inputs from the state, allowing for a new gesture.",
    "lineNumber": 223,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "inputs",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#inputs",
    "access": null,
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "numActiveInputs",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#numActiveInputs",
    "access": null,
    "description": "Counts the number of active inputs at any given time.",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} - The number of active inputs."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The number of active inputs."
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerGesture",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#registerGesture",
    "access": null,
    "description": "Register the gesture to the current region.",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "gesture",
        "description": "The gesture to register"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to define the new gesture as."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "assignGestureId",
    "memberof": "src/core/classes/State.js~State",
    "longname": "src/core/classes/State.js~State#assignGestureId",
    "access": null,
    "description": "Tracks the gesture to this state object to become uniquely identifiable.\nUseful for nested Regions.",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "Gesture"
        ],
        "spread": false,
        "optional": false,
        "name": "gesture",
        "description": "The gesture to track"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/classes/ZingEvent.js",
    "memberof": null,
    "longname": "src/core/classes/ZingEvent.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file ZingEvent.js\n * Contains logic for ZingEvents\n */\n\nimport util from '../util.js';\n\nconst INITIAL_COORDINATE = 0;\n/**\n * An event wrapper that normalizes events across browsers and input devices\n * @class ZingEvent\n */\nclass ZingEvent {\n  /**\n   * @constructor\n   * @param {Event} event - The event object being wrapped.\n   * @param {Array} event.touches - The number of touches on a screen (mobile only).\n   * @param {Object} event.changedTouches - The TouchList representing points that\n   * participated in the event.\n   * @param {Number} touchIdentifier - The index of touch if applicable\n   */\n  constructor(event, touchIdentifier) {\n    /**\n     * The original event object.\n     * @type {Event}\n     */\n    this.originalEvent = event;\n\n    /**\n     * The type of event or null if it is an event not predetermined.\n     * @see util.normalizeEvent\n     * @type {String | null}\n     */\n    this.type = util.normalizeEvent(event.type);\n\n    /**\n     * The X coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.x = INITIAL_COORDINATE;\n\n    /**\n     * The Y coordinate for the event, based off of the client.\n     * @type {number}\n     */\n    this.y = INITIAL_COORDINATE;\n\n    var eventObj;\n    if (event.touches && event.changedTouches) {\n      for (var i = 0; i < event.changedTouches.length; i++) {\n        if (event.changedTouches[i].identifier === touchIdentifier) {\n          eventObj = event.changedTouches[i];\n          break;\n        }\n      }\n    } else {\n      eventObj = event;\n    }\n\n    this.x = this.clientX = eventObj.clientX;\n    this.y = this.clientY = eventObj.clientY;\n\n    /**\n     * The pageX coordinate for the event\n     * @type {number}\n     */\n    this.pageX = eventObj.pageX;\n\n    /**\n     * The pageY coordinate for the event\n     * @type {number}\n     */\n    this.pageY = eventObj.pageY;\n\n    /**\n     * The screenX coordinate for the event\n     * @type {number}\n     */\n    this.screenX = eventObj.screenX;\n\n    /**\n     * The screenY coordinate for the event\n     * @type {number}\n     */\n    this.screenY = eventObj.screenY;\n  }\n\n  /*constructor*/\n}\n\nexport default ZingEvent;\n"
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "INITIAL_COORDINATE",
    "memberof": "src/core/classes/ZingEvent.js",
    "longname": "src/core/classes/ZingEvent.js~INITIAL_COORDINATE",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/core/classes/ZingEvent.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ZingEvent",
    "memberof": "src/core/classes/ZingEvent.js",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/classes/ZingEvent.js",
    "importStyle": "ZingEvent",
    "description": "An event wrapper that normalizes events across browsers and input devices",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ZingEvent"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#constructor",
    "access": null,
    "description": "",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event object being wrapped."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "event.touches",
        "description": "The number of touches on a screen (mobile only)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event.changedTouches",
        "description": "The TouchList representing points that\nparticipated in the event."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "touchIdentifier",
        "description": "The index of touch if applicable"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "originalEvent",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#originalEvent",
    "access": null,
    "description": "The original event object.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Event"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#type",
    "access": null,
    "description": "The type of event or null if it is an event not predetermined.",
    "see": [
      "util.normalizeEvent"
    ],
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "String ",
        " null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "x",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#x",
    "access": null,
    "description": "The X coordinate for the event, based off of the client.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "y",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#y",
    "access": null,
    "description": "The Y coordinate for the event, based off of the client.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "x",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#x",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "y",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#y",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pageX",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#pageX",
    "access": null,
    "description": "The pageX coordinate for the event",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pageY",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#pageY",
    "access": null,
    "description": "The pageY coordinate for the event",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "screenX",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#screenX",
    "access": null,
    "description": "The screenX coordinate for the event",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "screenY",
    "memberof": "src/core/classes/ZingEvent.js~ZingEvent",
    "longname": "src/core/classes/ZingEvent.js~ZingEvent#screenY",
    "access": null,
    "description": "The screenY coordinate for the event",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/dispatcher.js",
    "memberof": null,
    "longname": "src/core/dispatcher.js",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "content": "/**\n * @file dispatcher.js\n * Contains logic for the dispatcher\n */\n\n/**\n * Emits data at the target element if available, and bubbles up from the target to the parent\n * until the document has been reached. Called from the arbiter.\n * @param {Binding} binding - An object of type Binding\n * @param {Object} data - The metadata computed by the gesture being emitted.\n * @param {Array} events - An array of ZingEvents, corresponding to the inputs on the screen.\n */\nfunction dispatcher(binding, data, events) {\n  data.events = events;\n\n  //noinspection JSCheckFunctionSignatures\n  var newEvent = new CustomEvent(binding.gesture.getId(), {\n    detail: data,\n    bubbles: true,\n    cancelable: true\n  });\n  emitEvent(binding.element, newEvent, binding);\n}\n/*dispatcher*/\n\n/**\n * Emits the new event. Unbinds the event if the event was registered at bindOnce.\n * @param {Element} target - Element object to emit the event to.\n * @param {Event} event - The CustomEvent to emit.\n * @param {Binding} binding - An object of type Binding\n */\nfunction emitEvent(target, event, binding) {\n  target.dispatchEvent(event);\n  if (binding.bindOnce) {\n    ZingTouch.unbind(binding.element, binding.gesture.getType());\n  }\n}\n/*emitEvent*/\n\nexport default dispatcher;\n"
  },
  {
    "__docId__": 77,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "emitEvent",
    "memberof": "src/core/dispatcher.js",
    "longname": "src/core/dispatcher.js~emitEvent",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/core/dispatcher.js",
    "importStyle": null,
    "description": "Emits the new event. Unbinds the event if the event was registered at bindOnce.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "Element object to emit the event to."
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The CustomEvent to emit."
      },
      {
        "nullable": null,
        "types": [
          "Binding"
        ],
        "spread": false,
        "optional": false,
        "name": "binding",
        "description": "An object of type Binding"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dispatcher",
    "memberof": "src/core/dispatcher.js",
    "longname": "src/core/dispatcher.js~dispatcher",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/dispatcher.js",
    "importStyle": "dispatcher",
    "description": "Emits data at the target element if available, and bubbles up from the target to the parent\nuntil the document has been reached. Called from the arbiter.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Binding"
        ],
        "spread": false,
        "optional": false,
        "name": "binding",
        "description": "An object of type Binding"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The metadata computed by the gesture being emitted."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "An array of ZingEvents, corresponding to the inputs on the screen."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/interpreter.js",
    "memberof": null,
    "longname": "src/core/interpreter.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file interpreter.js\n * Contains logic for the interpreter\n */\n\nimport util from './util.js';\n\n/**\n * Receives an event and an array of Bindings (element -> gesture handler) to determine\n * what event will be emitted. Called from the arbiter.\n * @param {Array} bindings - An array containing Binding objects that associate the\n * element to an event handler.\n * @param {Object} event - The event emitted from the window.\n * @param {Object} state - The state object of the current listener.\n * @returns {Object | null} - Returns an object containing a binding and metadata,\n * or null if a gesture will not be emitted.\n */\nfunction interpreter(bindings, event, state) {\n  var evType = util.normalizeEvent(event.type);\n  var candidates = [];\n  bindings.forEach(binding => {\n    let result = binding.gesture[evType](state.inputs, state);\n    if (result) {\n\n      var events = [];\n      state.inputs.forEach(input => {\n        events.push(input.current);\n      });\n\n      candidates.push({\n        binding: binding,\n        data: result,\n        events: events\n      });\n    }\n  });\n\n  return candidates;\n\n}\n\nexport default interpreter;\n"
  },
  {
    "__docId__": 80,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "interpreter",
    "memberof": "src/core/interpreter.js",
    "longname": "src/core/interpreter.js~interpreter",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/interpreter.js",
    "importStyle": "interpreter",
    "description": "Receives an event and an array of Bindings (element -> gesture handler) to determine\nwhat event will be emitted. Called from the arbiter.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object | null} - Returns an object containing a binding and metadata,\nor null if a gesture will not be emitted."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "bindings",
        "description": "An array containing Binding objects that associate the\nelement to an event handler."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event emitted from the window."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object of the current listener."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object ",
        " null"
      ],
      "spread": false,
      "description": "Returns an object containing a binding and metadata,\nor null if a gesture will not be emitted."
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/main.js",
    "memberof": null,
    "longname": "src/core/main.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file main.js\n * Main file to setup event listeners on the document, and to expose the ZingTouch object\n */\n\nimport ZingTouch from './../ZingTouch.js';\nwindow.ZingTouch = ZingTouch;\nexport {ZingTouch};\n\n"
  },
  {
    "__docId__": 82,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/core/util.js",
    "memberof": null,
    "longname": "src/core/util.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file util.js\n * Various accessor and mutator functions to handle state and validation.\n */\n\nconst CIRCLE_DEGREES = 360;\nconst HALF_CIRCLE_DEGREES = 180;\n\n/**\n *  Contains generic helper functions\n * @type {Object}\n * @namespace util\n */\nvar util = {\n\n  /**\n   * Normalizes window events to be either of type start, move, or end.\n   * @param {String} type - The event type emitted by the browser\n   * @returns {null|String} - The normalized event, or null if it is an event not predetermined.\n   */\n  normalizeEvent(type) {\n    switch (type) {\n      case 'mousedown' :\n      case 'touchstart' :\n      case 'pointerdown' :\n        return 'start';\n      case 'mousemove' :\n      case 'touchmove' :\n      case 'pointermove' :\n        return 'move';\n      case 'mouseup' :\n      case 'touchend' :\n      case 'pointerup' :\n        return 'end';\n      default :\n        return null;\n    }\n  },\n  /*normalizeEvent*/\n\n  /**\n   * Determines if the current and previous coordinates are within or up to a certain tolerance.\n   * @param {Number} currentX - Current event's x coordinate\n   * @param {Number} currentY - Current event's y coordinate\n   * @param {Number} previousX - Previous event's x coordinate\n   * @param {Number} previousY - Previous event's y coordinate\n   * @param {Number} tolerance - The tolerance in pixel value.\n   * @returns {boolean} - true if the current coordinates are within the tolerance, false otherwise\n   */\n  isWithin(currentX, currentY, previousX, previousY, tolerance) {\n    return ((Math.abs(currentY - previousY) <= tolerance) &&\n    (Math.abs(currentX - previousX) <= tolerance));\n  },\n  /*isWithin*/\n\n  /**\n   * Calculates the distance between two points.\n   * @param x0\n   * @param x1\n   * @param y0\n   * @param y1\n   * @returns {number} The numerical value between two points\n   */\n  distanceBetweenTwoPoints(x0, x1, y0, y1) {\n    var dist = (Math.sqrt(((x1 - x0) * (x1 - x0)) + ((y1 - y0) * (y1 - y0))));\n    return Math.round(dist * 100) / 100;\n  },\n\n  /**\n   * Calculates the midpoint coordinates between two points.\n   * @param x0\n   * @param x1\n   * @param y0\n   * @param y1\n   * @returns {Object} The coordinates of the midpoint.\n   */\n  getMidpoint(x0, x1, y0, y1) {\n    return {\n      x: ((x0 + x1) / 2),\n      y: ((y0 + y1) / 2)\n    };\n  },\n  /**\n   * Calculates the angle between the projection and an origin point.\n   *   |                (projectionX,projectionY)\n   *   |             /°\n   *   |          /\n   *   |       /\n   *   |    / θ\n   *   | /__________\n   *   ° (originX, originY)\n   * @param {number} originX\n   * @param {number} originY\n   * @param {number} projectionX\n   * @param {number} projectionY\n   * @returns {number} - Degree along the unit circle where the project lies\n   */\n  getAngle(originX, originY, projectionX, projectionY) {\n    var angle = Math.atan2(projectionY - originY, projectionX - originX) *\n      ((HALF_CIRCLE_DEGREES) / Math.PI);\n    return CIRCLE_DEGREES - ((angle < 0) ? (CIRCLE_DEGREES + angle) : angle);\n  },\n  /**\n   * Calculates the angular distance in degrees between two angles along the unit circle\n   * @param {number} start - The starting point in degrees\n   * @param {number} end - The ending point in degrees\n   * @returns {number} The number of degrees between the starting point ant ending point. Negative\n   * degrees denote a clockwise direction, and positive a counter-clockwise direction.\n   */\n  getAngularDistance(start, end) {\n    var angle = (end - start) % CIRCLE_DEGREES;\n    var sign = (angle < 0) ? 1 : -1;\n    angle = Math.abs(angle);\n    return (angle > HALF_CIRCLE_DEGREES) ? sign * (CIRCLE_DEGREES - angle) : sign * angle;\n  },\n\n  /**\n   * Calculates the velocity of pixel/milliseconds between two points\n   * @param {Number} startX\n   * @param {Number} startY\n   * @param {Number} startTime\n   * @param {Number} endX\n   * @param {Number} endY\n   * @param {Number} endTime\n   * @returns {Number} velocity of px/time\n   */\n  getVelocity(startX, startY, startTime, endX, endY, endTime) {\n\n    var distance = this.distanceBetweenTwoPoints(startX, endX, startY, endY);\n    return (distance / (endTime - startTime));\n  },\n  /**\n   * Returns the farthest right input\n   * @param inputs\n   */\n  getRightMostInput(inputs) {\n    var rightMost = null;\n    var distance = Number.MIN_VALUE;\n    inputs.forEach(input => {\n      if (input.initial.x > distance) {\n        rightMost = input;\n      }\n    });\n    return rightMost;\n  },\n\n  /**\n   * Determines is the value is an integer and not a floating point\n   * @param value\n   * @returns {boolean}\n   */\n  isInteger(value) {\n    return (typeof value === 'number') && (value % 1 === 0);\n  },\n  /**\n   * Determines if the x,y position of the input is within then target.\n   * @param x -clientX\n   * @param y -clientY\n   * @param target\n   */\n  isInside(x, y, target) {\n    var rect = target.getBoundingClientRect();\n    return ((x > rect.left && x < rect.left + rect.width) && (y > rect.top && y < rect.top + rect.height));\n  },\n  /**\n   * Polyfill for event.propagationPath\n   * @param event\n   */\n  getPropagationPath(event) {\n    if (event.path) {\n      return event.path;\n    } else {\n      var path = [];\n      var node = event.target;\n      while (node != document) {\n        path.push(node);\n        node = node.parentNode;\n      }\n\n      return path;\n    }\n  },\n\n  /**\n   * Retrieve the index inside the path array\n   * @param path\n   * @param element\n   * @returns {element}\n   */\n  getPathIndex(path, element) {\n    var index = path.length;\n\n    path.forEach(obj => {\n      if (obj === element) {\n        index = i;\n      }\n    });\n\n    return index;\n  },\n\n  setMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = 'none';\n    element.style['touch-action'] = 'none';\n  },\n\n  removeMSPreventDefault(element) {\n    element.style['-ms-content-zooming'] = '';\n    element.style['touch-action'] = '';\n  }\n};\nexport default util;\n"
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "CIRCLE_DEGREES",
    "memberof": "src/core/util.js",
    "longname": "src/core/util.js~CIRCLE_DEGREES",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/core/util.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "util.js\nVarious accessor and mutator functions to handle state and validation."
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "HALF_CIRCLE_DEGREES",
    "memberof": "src/core/util.js",
    "longname": "src/core/util.js~HALF_CIRCLE_DEGREES",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/core/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "util",
    "memberof": "src/core/util.js",
    "longname": "src/core/util.js~util",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/core/util.js",
    "importStyle": "util",
    "description": " Contains generic helper functions",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": "util"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gestures/Distance.js",
    "memberof": null,
    "longname": "src/gestures/Distance.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file Distance.js\n * Contains the abstract Distance class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Distance is defined as two inputs moving either together or apart.\n * @class Distance\n */\nclass Distance extends Gesture {\n  /**\n   * Constructor function for the Distance class.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'distance';\n\n    /**\n     * The minimum amount in pixels the inputs must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ? options.threshold : DEFAULT_MIN_THRESHOLD;\n  }\n\n  /**\n   * start() - Event hook for the start of a gesture. Initialized the lastEmitted gesture and stores it in the first input for reference.\n   * events.\n   * @param inputs\n   */\n  start(inputs) {\n\n    if (inputs.length === DEFAULT_INPUTS) {\n      //Store the progress in the first input.\n      var progress = inputs[0].getGestureProgress(this.type);\n      progress.lastEmittedDistance = util.distanceBetweenTwoPoints(inputs[0].current.x, inputs[1].current.x,\n        inputs[0].current.y, inputs[1].current.y);\n    }\n  }\n\n  /**\n   * Event hook for the move of a gesture. Determines if the two points are moved in the expected\n   * direction relative to the current distance and the last distance.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @returns {Object | null} - Returns the distance in pixels between the two inputs.\n   */\n  move(inputs, state) {\n    if (state.numActiveInputs() === DEFAULT_INPUTS) {\n      var currentDistance = util.distanceBetweenTwoPoints(inputs[0].current.x, inputs[1].current.x,\n        inputs[0].current.y, inputs[1].current.y);\n      var lastDistance = util.distanceBetweenTwoPoints(inputs[0].previous.x, inputs[1].previous.x,\n        inputs[0].previous.y, inputs[1].previous.y);\n\n      //Retrieve the first input's progress.\n      var progress = inputs[0].getGestureProgress(this.type);\n\n      if (this.type === 'expand') {\n        if (currentDistance < lastDistance) {\n          progress.lastEmittedDistance = currentDistance;\n        } else if ((currentDistance - progress.lastEmittedDistance >= this.threshold)) {\n          progress.lastEmittedDistance = currentDistance;\n          return {\n            distance: currentDistance\n          };\n        }\n      } else {\n        if (currentDistance > lastDistance) {\n          progress.lastEmittedDistance = currentDistance;\n        } else if (currentDistance < lastDistance && (progress.lastEmittedDistance - currentDistance >= this.threshold)) {\n          progress.lastEmittedDistance = currentDistance;\n          return {\n            distance: currentDistance\n          };\n        }\n      }\n\n      return null;\n    }\n  }\n}\n\nexport default Distance;\n"
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_INPUTS",
    "memberof": "src/gestures/Distance.js",
    "longname": "src/gestures/Distance.js~DEFAULT_INPUTS",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Distance.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_MIN_THRESHOLD",
    "memberof": "src/gestures/Distance.js",
    "longname": "src/gestures/Distance.js~DEFAULT_MIN_THRESHOLD",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Distance.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Distance",
    "memberof": "src/gestures/Distance.js",
    "longname": "src/gestures/Distance.js~Distance",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/gestures/Distance.js",
    "importStyle": "Distance",
    "description": "A Distance is defined as two inputs moving either together or apart.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Distance"
      }
    ],
    "interface": false,
    "extends": [
      "src/gestures/Gesture.js~Gesture"
    ]
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gestures/Distance.js~Distance",
    "longname": "src/gestures/Distance.js~Distance#constructor",
    "access": null,
    "description": "Constructor function for the Distance class.",
    "lineNumber": 20,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Distance.js~Distance",
    "longname": "src/gestures/Distance.js~Distance#type",
    "access": null,
    "description": "The type of the Gesture.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "threshold",
    "memberof": "src/gestures/Distance.js~Distance",
    "longname": "src/gestures/Distance.js~Distance#threshold",
    "access": null,
    "description": "The minimum amount in pixels the inputs must move until it is fired.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "start",
    "memberof": "src/gestures/Distance.js~Distance",
    "longname": "src/gestures/Distance.js~Distance#start",
    "access": null,
    "description": "start() - Event hook for the start of a gesture. Initialized the lastEmitted gesture and stores it in the first input for reference.\nevents.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "src/gestures/Distance.js~Distance",
    "longname": "src/gestures/Distance.js~Distance#move",
    "access": null,
    "description": "Event hook for the move of a gesture. Determines if the two points are moved in the expected\ndirection relative to the current distance and the last distance.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object | null} - Returns the distance in pixels between the two inputs."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object of the current region."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object ",
        " null"
      ],
      "spread": false,
      "description": "Returns the distance in pixels between the two inputs."
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gestures/Expand.js",
    "memberof": null,
    "longname": "src/gestures/Expand.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file Expand.js\n * Contains the Expand class\n */\n\nimport Distance from './Distance.js';\nimport util from './../core/util.js';\n\n/**\n * An Expand is defined as two inputs moving farther away from each other. This gesture does\n * not account for any start/end events to allow for the event to interact with the Pan and Pinch\n * events.\n * @class Expand\n */\nclass Expand extends Distance {\n  /**\n   * Constructor function for the Expand class.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'expand';\n\n  }\n\n}\n\nexport default Expand;\n"
  },
  {
    "__docId__": 96,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Expand",
    "memberof": "src/gestures/Expand.js",
    "longname": "src/gestures/Expand.js~Expand",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/gestures/Expand.js",
    "importStyle": "Expand",
    "description": "An Expand is defined as two inputs moving farther away from each other. This gesture does\nnot account for any start/end events to allow for the event to interact with the Pan and Pinch\nevents.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Expand"
      }
    ],
    "interface": false,
    "extends": [
      "src/gestures/Distance.js~Distance"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gestures/Expand.js~Expand",
    "longname": "src/gestures/Expand.js~Expand#constructor",
    "access": null,
    "description": "Constructor function for the Expand class.",
    "lineNumber": 19,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Expand.js~Expand",
    "longname": "src/gestures/Expand.js~Expand#type",
    "access": null,
    "description": "The type of the Gesture.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gestures/Gesture.js",
    "memberof": null,
    "longname": "src/gestures/Gesture.js",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "content": "/**\n * @file Gesture.js\n * Contains the Gesture class\n */\n\n/**\n * The Gesture class that all gestures inherit from.\n */\nclass Gesture {\n  /**\n   * Constructor function for the Gesture class.\n   * @class Gesture\n   */\n  constructor() {\n    /**\n     * The generic string type of gesture ('expand'|'pan'|'pinch'|'rotate'|'swipe'|'tap').\n     * @type {String}\n     */\n    this.type = null;\n\n    /**\n     * The unique identifier for each gesture determined at bind time by the state object. This\n     * allows for distinctions across instance variables of Gestures that are created on the fly\n     * (e.g. Tap-1, Tap-2, etc).\n     * @type {String|null}\n     */\n    this.id = null;\n  }\n\n  /**\n   * Set the type of the gesture to be called during an event\n   * @param {String} type - The unique identifier of the gesture being created.\n   */\n  setType(type) {\n    this.type = type;\n  }\n  /*setId*/\n\n  /**\n   * getType() - Returns the generic type of the gesture\n   * @returns {String} - The type of gesture\n   */\n  getType() {\n    return this.type;\n  }\n  /*getType*/\n\n  /**\n   * Set the id of the gesture to be called during an event\n   * @param {String} id - The unique identifier of the gesture being created.\n   */\n  setId(id) {\n    this.id = id;\n  }\n  /*setId*/\n\n  /**\n   * Return the id of the event. If the id does not exist, return the type.\n   * @return {String}\n   */\n  getId() {\n    return (this.id !== null) ? this.id : this.type;\n  }\n  /*getId*/\n\n  /**\n   * Updates internal properties with new ones, only if the properties exist.\n   * @param object\n   */\n  update(object) {\n\n    for (var key in object) {\n      if (this[key]) {\n        this[key] = object[key];\n      }\n    }\n  }\n\n  //noinspection JSUnusedLocalSymbols\n  /**\n   * start() - Event hook for the start of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @returns {null|Object}  - Default of null\n   */\n  start(inputs) {\n    return null;\n  }\n  /*start*/\n\n  //noinspection JSUnusedLocalSymbols\n  /**\n   * move() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @returns {null|Object} - Default of null\n   */\n  move(inputs, state) {\n    return null;\n  }\n  /*move*/\n\n  //noinspection JSUnusedLocalSymbols\n  /**\n   * end() - Event hook for the move of a gesture\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @returns {null|Object}  - Default of null\n   */\n  end(inputs) {\n    return null;\n  }\n  /*end*/\n\n}\n\nexport default Gesture;\n"
  },
  {
    "__docId__": 100,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Gesture",
    "memberof": "src/gestures/Gesture.js",
    "longname": "src/gestures/Gesture.js~Gesture",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/gestures/Gesture.js",
    "importStyle": "Gesture",
    "description": "The Gesture class that all gestures inherit from.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#constructor",
    "access": null,
    "description": "Constructor function for the Gesture class.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Gesture"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#type",
    "access": null,
    "description": "The generic string type of gesture ('expand'|'pan'|'pinch'|'rotate'|'swipe'|'tap').",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#id",
    "access": null,
    "description": "The unique identifier for each gesture determined at bind time by the state object. This\nallows for distinctions across instance variables of Gestures that are created on the fly\n(e.g. Tap-1, Tap-2, etc).",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "String",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setType",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#setType",
    "access": null,
    "description": "Set the type of the gesture to be called during an event",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The unique identifier of the gesture being created."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#type",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getType",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#getType",
    "access": null,
    "description": "getType() - Returns the generic type of the gesture",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - The type of gesture"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The type of gesture"
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setId",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#setId",
    "access": null,
    "description": "Set the id of the gesture to be called during an event",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The unique identifier of the gesture being created."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#id",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getId",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#getId",
    "access": null,
    "description": "Return the id of the event. If the id does not exist, return the type.",
    "lineNumber": 61,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#update",
    "access": null,
    "description": "Updates internal properties with new ones, only if the properties exist.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "start",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#start",
    "access": null,
    "description": "start() - Event hook for the start of a gesture",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|Object}  - Default of null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Object"
      ],
      "spread": false,
      "description": "Default of null"
    },
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#move",
    "access": null,
    "description": "move() - Event hook for the move of a gesture",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|Object} - Default of null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object of the current region."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Object"
      ],
      "spread": false,
      "description": "Default of null"
    },
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "src/gestures/Gesture.js~Gesture",
    "longname": "src/gestures/Gesture.js~Gesture#end",
    "access": null,
    "description": "end() - Event hook for the move of a gesture",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|Object}  - Default of null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Object"
      ],
      "spread": false,
      "description": "Default of null"
    },
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gestures/Pan.js",
    "memberof": null,
    "longname": "src/gestures/Pan.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file Pan.js\n * Contains the Pan class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MIN_THRESHOLD = 1;\n\n/**\n * A Pan is defined as a normal movement in any direction on a screen. Pan gestures do not\n * track start events and can interact with pinch and expand gestures.\n * @class Pan\n */\nclass Pan extends Gesture {\n  /**\n   * Constructor function for the Pan class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs=1] - Number of inputs for the Pan gesture.\n   * @param {Number} [options.threshold=1] - The minimum number of pixels the input\n   * has to move to trigger this gesture.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'pan';\n\n    /**\n     * The number of inputs to trigger a Pan can be variable, and the maximum number\n     * being a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ? options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The minimum amount in pixels the pan must move until it is fired.\n     * @type {Number}\n     */\n    this.threshold = (options && options.threshold) ? options.threshold : DEFAULT_MIN_THRESHOLD;\n    \n  }\n\n  /*constructor*/\n\n  /**\n   * start() - Event hook for the start of a gesture. Marks each input as active, so it can invalidate any end\n   * events.\n   * @param inputs\n   */\n  start(inputs) {\n\n    inputs.forEach(input => {\n      var progress = input.getGestureProgress(this.getId());\n      progress.active = true;\n      progress.lastEmitted = {\n        x: input.current.x,\n        y: input.current.y\n      };\n    });\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture. Fired whenever the input length is met,\n   * and keeps a boolean flag that the gesture has fired at least once.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current region.\n   * @returns {Object} - Returns the distance in pixels between the two inputs.\n   */\n  move(inputs, state) {\n    if (this.numInputs === inputs.length) {\n      var output = {\n        data: []\n      };\n      for (var i = 0; i < inputs.length; i++) {\n        var progress = inputs[i].getGestureProgress(this.getId());\n\n        var reachedThreshold = false;\n\n        //Check threshold distance\n        reachedThreshold =  (Math.abs(inputs[i].current.y - progress.lastEmitted.y) > this.threshold ||\n        Math.abs(inputs[i].current.x - progress.lastEmitted.x) > this.threshold);\n\n        if (progress.active && reachedThreshold) {\n\n          output.data[i] = {\n            distanceFromOrigin: util.distanceBetweenTwoPoints(inputs[i].initial.x, inputs[i].current.x,\n              inputs[i].initial.y, inputs[i].current.y),\n            directionFromOrigin: util.getAngle(inputs[i].initial.x, inputs[i].initial.y, inputs[i].current.x, inputs[i].current.y),\n            currentDirection: util.getAngle(progress.lastEmitted.x, progress.lastEmitted.y, inputs[i].current.x, inputs[i].current.y)\n          };\n          progress.lastEmitted.x = inputs[i].current.x;\n          progress.lastEmitted.y = inputs[i].current.y;\n\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  /*move*/\n\n  /**\n   * end() - Event hook for the end of a gesture. If the gesture has at least fired once, then it\n   * ends on the first end event such that any remaining inputs will not trigger the event until\n   * all inputs have reached the touchend event. Any touchend->touchstart events that occur\n   * before all inputs are fully off the screen should not fire.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @returns {null} - null if the gesture is not to be emitted, Object with information otherwise.\n   */\n  end(inputs) {\n    inputs.forEach(input => {\n      var progress = input.getGestureProgress(this.getId());\n      progress.active = false;\n    });\n    return null;\n  }\n\n  /*end*/\n}\n\nexport default Pan;\n"
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_INPUTS",
    "memberof": "src/gestures/Pan.js",
    "longname": "src/gestures/Pan.js~DEFAULT_INPUTS",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Pan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_MIN_THRESHOLD",
    "memberof": "src/gestures/Pan.js",
    "longname": "src/gestures/Pan.js~DEFAULT_MIN_THRESHOLD",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Pan.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Pan",
    "memberof": "src/gestures/Pan.js",
    "longname": "src/gestures/Pan.js~Pan",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/gestures/Pan.js",
    "importStyle": "Pan",
    "description": "A Pan is defined as a normal movement in any direction on a screen. Pan gestures do not\ntrack start events and can interact with pinch and expand gestures.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Pan"
      }
    ],
    "interface": false,
    "extends": [
      "src/gestures/Gesture.js~Gesture"
    ]
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gestures/Pan.js~Pan",
    "longname": "src/gestures/Pan.js~Pan#constructor",
    "access": null,
    "description": "Constructor function for the Pan class.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "options.numInputs",
        "description": "Number of inputs for the Pan gesture."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "options.threshold",
        "description": "The minimum number of pixels the input\nhas to move to trigger this gesture."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Pan.js~Pan",
    "longname": "src/gestures/Pan.js~Pan#type",
    "access": null,
    "description": "The type of the Gesture.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "numInputs",
    "memberof": "src/gestures/Pan.js~Pan",
    "longname": "src/gestures/Pan.js~Pan#numInputs",
    "access": null,
    "description": "The number of inputs to trigger a Pan can be variable, and the maximum number\nbeing a factor of the browser.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "threshold",
    "memberof": "src/gestures/Pan.js~Pan",
    "longname": "src/gestures/Pan.js~Pan#threshold",
    "access": null,
    "description": "The minimum amount in pixels the pan must move until it is fired.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "start",
    "memberof": "src/gestures/Pan.js~Pan",
    "longname": "src/gestures/Pan.js~Pan#start",
    "access": null,
    "description": "start() - Event hook for the start of a gesture. Marks each input as active, so it can invalidate any end\nevents.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "src/gestures/Pan.js~Pan",
    "longname": "src/gestures/Pan.js~Pan#move",
    "access": null,
    "description": "move() - Event hook for the move of a gesture. Fired whenever the input length is met,\nand keeps a boolean flag that the gesture has fired at least once.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Returns the distance in pixels between the two inputs."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object of the current region."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns the distance in pixels between the two inputs."
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "src/gestures/Pan.js~Pan",
    "longname": "src/gestures/Pan.js~Pan#end",
    "access": null,
    "description": "end() - Event hook for the end of a gesture. If the gesture has at least fired once, then it\nends on the first end event such that any remaining inputs will not trigger the event until\nall inputs have reached the touchend event. Any touchend->touchstart events that occur\nbefore all inputs are fully off the screen should not fire.",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null} - null if the gesture is not to be emitted, Object with information otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null"
      ],
      "spread": false,
      "description": "null if the gesture is not to be emitted, Object with information otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gestures/Pinch.js",
    "memberof": null,
    "longname": "src/gestures/Pinch.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file Pinch.js\n * Contains the Pinch class\n */\n\nimport Distance from './Distance.js';\nimport util from './../core/util.js';\n\n/**\n * An Pinch is defined as two inputs moving closer to each other. This gesture does\n * not account for any start/end events to allow for the event to interact with the Pan and Pinch\n * events.\n * @class Pinch\n */\nclass Pinch extends Distance {\n  /**\n   * Constructor function for the Pinch class.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'pinch';\n\n  }\n\n}\n\nexport default Pinch;\n"
  },
  {
    "__docId__": 126,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Pinch",
    "memberof": "src/gestures/Pinch.js",
    "longname": "src/gestures/Pinch.js~Pinch",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/gestures/Pinch.js",
    "importStyle": "Pinch",
    "description": "An Pinch is defined as two inputs moving closer to each other. This gesture does\nnot account for any start/end events to allow for the event to interact with the Pan and Pinch\nevents.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Pinch"
      }
    ],
    "interface": false,
    "extends": [
      "src/gestures/Distance.js~Distance"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gestures/Pinch.js~Pinch",
    "longname": "src/gestures/Pinch.js~Pinch#constructor",
    "access": null,
    "description": "Constructor function for the Pinch class.",
    "lineNumber": 19,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Pinch.js~Pinch",
    "longname": "src/gestures/Pinch.js~Pinch#type",
    "access": null,
    "description": "The type of the Gesture.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gestures/Rotate.js",
    "memberof": null,
    "longname": "src/gestures/Rotate.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file Rotate.js\n * Contains the Rotate class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 2;\n\n/**\n * A Rotate is defined as two inputs moving about a circle, maintaining a relatively equal radius.\n * @class Rotate\n */\nclass Rotate extends Gesture {\n  /**\n   * Constructor function for the Rotate class.\n   */\n  constructor() {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'rotate';\n  }\n\n  /**\n   * move() - Event hook for the move of a gesture. Obtains the midpoint of two the two inputs and\n   * calculates the projection of the right most input along a unit circle to obtain an angle.\n   * This angle is compared to the previously calculated angle to output the change of distance,\n   * and is compared to the initial angle to output the distance from the initial angle to the\n   * current angle.\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @param {Object} state - The state object of the current listener.\n   * @returns {null} - null if this event did not occur\n   * @returns {Object} obj.angle - The current angle along the unit circle\n   * @returns {Object} obj.distanceFromOrigin - The angular distance travelled from the initial right\n   * most point.\n   * @returns {Object} obj.distanceFromLast - The change of angle between the last position and\n   * the current position.\n   */\n  move(inputs, state) {\n    if (state.numActiveInputs() === DEFAULT_INPUTS) {\n\n      var referencePivot = util.getMidpoint(inputs[0].initial.x, inputs[1].initial.x,\n        inputs[0].initial.y, inputs[1].initial.y);\n      var currentPivot = util.getMidpoint(inputs[0].current.x, inputs[1].current.x,\n        inputs[0].current.y, inputs[1].current.y);\n      var diffX = referencePivot.x - currentPivot.x;\n      var diffY = referencePivot.y - currentPivot.y;\n      var input = util.getRightMostInput(inputs);\n\n      //Translate the current pivot point.\n      var currentAngle = util.getAngle(referencePivot.x, referencePivot.y,\n        input.current.x + diffX, input.current.y + diffY);\n\n      var progress = input.getGestureProgress(this.getId());\n      if (!progress.initialAngle) {\n        progress.initialAngle = progress.previousAngle = currentAngle;\n        progress.distance = progress.change = 0;\n      } else {\n        progress.change = util.getAngularDistance(progress.previousAngle, currentAngle);\n        progress.distance = progress.distance + progress.change;\n      }\n\n      progress.previousAngle = currentAngle;\n\n      return {\n        angle: currentAngle,\n        distanceFromOrigin: progress.distance,\n        distanceFromLast: progress.change\n      };\n    }\n\n    return null;\n  }\n  /*move*/\n}\n\nexport default Rotate;\n"
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_INPUTS",
    "memberof": "src/gestures/Rotate.js",
    "longname": "src/gestures/Rotate.js~DEFAULT_INPUTS",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Rotate.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Rotate",
    "memberof": "src/gestures/Rotate.js",
    "longname": "src/gestures/Rotate.js~Rotate",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/gestures/Rotate.js",
    "importStyle": "Rotate",
    "description": "A Rotate is defined as two inputs moving about a circle, maintaining a relatively equal radius.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Rotate"
      }
    ],
    "interface": false,
    "extends": [
      "src/gestures/Gesture.js~Gesture"
    ]
  },
  {
    "__docId__": 132,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gestures/Rotate.js~Rotate",
    "longname": "src/gestures/Rotate.js~Rotate#constructor",
    "access": null,
    "description": "Constructor function for the Rotate class.",
    "lineNumber": 19,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Rotate.js~Rotate",
    "longname": "src/gestures/Rotate.js~Rotate#type",
    "access": null,
    "description": "The type of the Gesture.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "src/gestures/Rotate.js~Rotate",
    "longname": "src/gestures/Rotate.js~Rotate#move",
    "access": null,
    "description": "move() - Event hook for the move of a gesture. Obtains the midpoint of two the two inputs and\ncalculates the projection of the right most input along a unit circle to obtain an angle.\nThis angle is compared to the previously calculated angle to output the change of distance,\nand is compared to the initial angle to output the distance from the initial angle to the\ncurrent angle.",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null} - null if this event did not occur"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} obj.angle - The current angle along the unit circle"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} obj.distanceFromOrigin - The angular distance travelled from the initial right\nmost point."
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} obj.distanceFromLast - The change of angle between the last position and\nthe current position."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object of the current listener."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "obj.distanceFromLast - The change of angle between the last position and\nthe current position."
    },
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gestures/Swipe.js",
    "memberof": null,
    "longname": "src/gestures/Swipe.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file Swipe.js\n * Contains the Swipe class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MAX_REST_TIME = 100;\nconst DEFAULT_ESCAPE_VELOCITY = 0.2;\nconst DEFAULT_TIME_DISTORTION = 100;\nconst DEFAULT_MAX_PROGRESS_STACK = 10;\n\n/**\n * A swipe is defined as input(s) moving in the same direction in an relatively increasing velocity\n * and leaving the screen at some point before it drops below it's escape velocity.\n * @class Swipe\n */\nclass Swipe extends Gesture {\n\n  /**\n   * Constructor function for the Swipe class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.numInputs] - The number of inputs to trigger a Swipe can be variable,\n   *  and the maximum number being a factor of the browser.\n   *  move and current move events.\n   * @param {Number} [options.maxRestTime] - The maximum resting time a point has between it's last\n   * @param {Number} [options.escapeVelocity] - The minimum velocity the input has to be at to emit a swipe.\n   * @param {Number} [options.timeDistortion] - (EXPERIMENTAL) A value of time in milliseconds to distort between events.\n   * @param {Number} [options.maxProgressStack] - (EXPERIMENTAL)The maximum amount of move events to keep\n   * track of for a swipe.\n   */\n  constructor(options) {\n    super();\n    /**\n     * The type of the Gesture\n     * @type {String}\n     */\n    this.type = 'swipe';\n\n    /**\n     * The number of inputs to trigger a Swipe can be variable, and the maximum number being\n     * a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ? options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * The maximum resting time a point has between it's last move and current move events.\n     * @type {Number}\n     */\n    this.maxRestTime = (options && options.maxRestTime) ? options.maxRestTime : DEFAULT_MAX_REST_TIME;\n\n    /**\n     * The minimum velocity the input has to be at to emit a swipe. This is useful for determining\n     * the difference between\n     * a swipe and a pan gesture.\n     * @type {number}\n     */\n    this.escapeVelocity = (options && options.escapeVelocity) ? options.escapeVelocity : DEFAULT_ESCAPE_VELOCITY;\n\n    /**\n     * (EXPERIMENTAL) A value of time in milliseconds to distort between events. Browsers do not accurately\n     * measure time with the Date constructor in milliseconds, so consecutive events sometimes\n     * display the same timestamp but different x/y coordinates. This will distort a previous time\n     * in such cases by the timeDistortion's value.\n     * @type {number}\n     */\n    this.timeDistortion = (options && options.timeDistortion) ? options.timeDistortion : DEFAULT_TIME_DISTORTION;\n\n    /**\n     * (EXPERIMENTAL) The maximum amount of move events to keep track of for a swipe. This helps give a more\n     * accurate estimate of the user's velocity.\n     * @type {number}\n     */\n    this.maxProgressStack = (options && options.maxProgressStack) ? options.maxProgressStack : DEFAULT_MAX_PROGRESS_STACK;\n  }\n\n  /**\n   * Event hook for the move of a gesture. Captures an input's x/y coordinates and the time of\n   * it's event on a stack.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @returns {null} - Swipe does not emit from a move.\n   */\n  move(inputs, state) {\n    if (this.numInputs === inputs.length) {\n      for (var i = 0; i < inputs.length; i++) {\n        var progress = inputs[i].getGestureProgress(this.getId());\n        if (!progress.moves) {\n          progress.moves = [];\n        }\n\n        progress.moves.push({\n          time: new Date().getTime(),\n          x: inputs[i].current.x,\n          y: inputs[i].current.y\n        });\n\n        if (progress.length > this.maxProgressStack) {\n          progress.moves.shift();\n        }\n      }\n\n    }\n\n    return null;\n  }\n\n  /*move*/\n\n  /**\n   * Determines if the input's history validates a swipe motion. Determines if it did not come to\n   * a complete stop (maxRestTime), and if it had enough of a velocity to be considered\n   * (ESCAPE_VELOCITY).\n   * @param {Array} inputs - The array of Inputs on the screen\n   * @returns {null|Object} - null if the gesture is not to be emitted, Object with information otherwise.\n   */\n  end(inputs) {\n\n    if (this.numInputs === inputs.length) {\n\n      var output = {\n        data: []\n      };\n\n      for (var i = 0; i < inputs.length; i++) {\n\n        //Determine if all input events are on the 'end' event.\n        if (inputs[i].current.type !== 'end') {\n          return;\n        }\n\n        var progress = inputs[i].getGestureProgress(this.getId());\n        if (progress.moves && progress.moves.length > 2) {\n          //CHECK : Return if the input has not moved in maxRestTime ms.\n\n          var currentMove = progress.moves.pop();\n          if ((new Date().getTime()) - currentMove.time > this.maxRestTime) {\n            return null;\n          }\n\n          var lastMove;\n          var index = progress.moves.length - 1;\n\n          //CHECK : Date is unreliable, so we retrieve the last move event where the time is not the same.\n          while (index !== -1) {\n            if (progress.moves[index].time !== currentMove.time) {\n              lastMove = progress.moves[index];\n              break;\n            }\n\n            index--;\n          }\n\n          //If the date is REALLY unreliable, we apply a time distortion to the last event.\n          if (!lastMove) {\n            lastMove = progress.moves.pop();\n            lastMove.time += this.timeDistortion;\n          }\n\n          var velocity = util.getVelocity(lastMove.x, lastMove.y, lastMove.time,\n            currentMove.x, currentMove.y, currentMove.time);\n\n          output.data[i] = {\n            velocity: velocity,\n            currentDirection: util.getAngle(lastMove.x, lastMove.y, currentMove.x, currentMove.y)\n          };\n        }\n      }\n\n      for (var i = 0; i < output.data.length; i++) {\n        if (velocity < this.escapeVelocity) {\n          return null;\n        }\n      }\n\n      if (output.data.length > 0) {\n        return output;\n      }\n\n    }\n\n    return null;\n\n  }\n\n  /*end*/\n}\n\nexport default Swipe;\n"
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_INPUTS",
    "memberof": "src/gestures/Swipe.js",
    "longname": "src/gestures/Swipe.js~DEFAULT_INPUTS",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Swipe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_MAX_REST_TIME",
    "memberof": "src/gestures/Swipe.js",
    "longname": "src/gestures/Swipe.js~DEFAULT_MAX_REST_TIME",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Swipe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_ESCAPE_VELOCITY",
    "memberof": "src/gestures/Swipe.js",
    "longname": "src/gestures/Swipe.js~DEFAULT_ESCAPE_VELOCITY",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Swipe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_TIME_DISTORTION",
    "memberof": "src/gestures/Swipe.js",
    "longname": "src/gestures/Swipe.js~DEFAULT_TIME_DISTORTION",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Swipe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_MAX_PROGRESS_STACK",
    "memberof": "src/gestures/Swipe.js",
    "longname": "src/gestures/Swipe.js~DEFAULT_MAX_PROGRESS_STACK",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Swipe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Swipe",
    "memberof": "src/gestures/Swipe.js",
    "longname": "src/gestures/Swipe.js~Swipe",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/gestures/Swipe.js",
    "importStyle": "Swipe",
    "description": "A swipe is defined as input(s) moving in the same direction in an relatively increasing velocity\nand leaving the screen at some point before it drops below it's escape velocity.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Swipe"
      }
    ],
    "interface": false,
    "extends": [
      "src/gestures/Gesture.js~Gesture"
    ]
  },
  {
    "__docId__": 142,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#constructor",
    "access": null,
    "description": "Constructor function for the Swipe class.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numInputs",
        "description": "The number of inputs to trigger a Swipe can be variable,\n and the maximum number being a factor of the browser.\n move and current move events."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.maxRestTime",
        "description": "The maximum resting time a point has between it's last"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.escapeVelocity",
        "description": "The minimum velocity the input has to be at to emit a swipe."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.timeDistortion",
        "description": "(EXPERIMENTAL) A value of time in milliseconds to distort between events."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.maxProgressStack",
        "description": "(EXPERIMENTAL)The maximum amount of move events to keep\ntrack of for a swipe."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#type",
    "access": null,
    "description": "The type of the Gesture",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "numInputs",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#numInputs",
    "access": null,
    "description": "The number of inputs to trigger a Swipe can be variable, and the maximum number being\na factor of the browser.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "maxRestTime",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#maxRestTime",
    "access": null,
    "description": "The maximum resting time a point has between it's last move and current move events.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "escapeVelocity",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#escapeVelocity",
    "access": null,
    "description": "The minimum velocity the input has to be at to emit a swipe. This is useful for determining\nthe difference between\na swipe and a pan gesture.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "timeDistortion",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#timeDistortion",
    "access": null,
    "description": "(EXPERIMENTAL) A value of time in milliseconds to distort between events. Browsers do not accurately\nmeasure time with the Date constructor in milliseconds, so consecutive events sometimes\ndisplay the same timestamp but different x/y coordinates. This will distort a previous time\nin such cases by the timeDistortion's value.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "maxProgressStack",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#maxProgressStack",
    "access": null,
    "description": "(EXPERIMENTAL) The maximum amount of move events to keep track of for a swipe. This helps give a more\naccurate estimate of the user's velocity.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#move",
    "access": null,
    "description": "Event hook for the move of a gesture. Captures an input's x/y coordinates and the time of\nit's event on a stack.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null} - Swipe does not emit from a move."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object of the current region."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null"
      ],
      "spread": false,
      "description": "Swipe does not emit from a move."
    },
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "src/gestures/Swipe.js~Swipe",
    "longname": "src/gestures/Swipe.js~Swipe#end",
    "access": null,
    "description": "Determines if the input's history validates a swipe motion. Determines if it did not come to\na complete stop (maxRestTime), and if it had enough of a velocity to be considered\n(ESCAPE_VELOCITY).",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|Object} - null if the gesture is not to be emitted, Object with information otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Object"
      ],
      "spread": false,
      "description": "null if the gesture is not to be emitted, Object with information otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/gestures/Tap.js",
    "memberof": null,
    "longname": "src/gestures/Tap.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file Tap.js\n * Contains the Tap class\n */\n\nimport Gesture from './Gesture.js';\nimport util from './../core/util.js';\n\nconst DEFAULT_MIN_DELAY_MS = 0;\nconst DEFAULT_MAX_DELAY_MS = 300;\nconst DEFAULT_INPUTS = 1;\nconst DEFAULT_MOVE_PX_TOLERANCE = 10;\n\n/**\n * A Tap is defined as a touchstart to touchend event in quick succession.\n * @class Tap\n */\nclass Tap extends Gesture {\n  /**\n   * Constructor function for the Tap class.\n   * @param {Object} [options] - The options object.\n   * @param {Number} [options.minDelay=0] - The minimum delay between a touchstart and\n   * touchend can be configured in milliseconds.\n   * @param {Number} [options.maxDelay=300] - The maximum delay between a touchstart and\n   * touchend can be configured in milliseconds.\n   * @param {Number} [options.numInputs=1] - Number of inputs for the Tap gesture.\n   * @param {Number} [options.tolerance=10] - The tolerance in pixels a user can move.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * The type of the Gesture.\n     * @type {String}\n     */\n    this.type = 'tap';\n\n    /**\n     * The minimum amount between a touchstart and a touchend can be configured in milliseconds.\n     * The minimum delay starts to count down when the expected number of inputs are on\n     * the screen, and ends when ALL inputs are off the screen.\n     * @type {Number}\n     */\n    this.minDelay = (options && options.minDelay) ? options.minDelay : DEFAULT_MIN_DELAY_MS;\n\n    /**\n     * The maximum delay between a touchstart and touchend can be configured in milliseconds.\n     * The maximum delay starts to count down when the expected number of inputs are on\n     * the screen, and ends when ALL inputs are off the screen.\n     * @type {Number}\n     */\n    this.maxDelay = (options && options.maxDelay) ? options.maxDelay : DEFAULT_MAX_DELAY_MS;\n\n    /**\n     * The number of inputs to trigger a Tap can be variable, and the maximum number being\n     * a factor of the browser.\n     * @type {Number}\n     */\n    this.numInputs = (options && options.numInputs) ? options.numInputs : DEFAULT_INPUTS;\n\n    /**\n     * A move tolerance in pixels allows some slop between a user's start to end events. This\n     * allows the Tap gesture to be triggered more easily.\n     * @type {number}\n     */\n    this.tolerance = (options && options.tolerance) ? options.tolerance : DEFAULT_MOVE_PX_TOLERANCE;\n  }\n\n  /*constructor*/\n\n  /**\n   * Event hook for the start of a gesture. Keeps track of when the inputs trigger the start event.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @returns {null} - Tap does not trigger on a start event.\n   */\n  start(inputs) {\n    if (inputs.length === this.numInputs) {\n      inputs.forEach(input => {\n        var progress = input.getGestureProgress(this.type);\n        progress.start = new Date().getTime();\n      });\n    }\n\n    return null;\n  }\n\n  /*start*/\n\n  /**\n   * Event hook for the move of a gesture. The Tap event reaches here if the user\n   * starts to move their input\n   * before an 'end' event is reached.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @param {Object} state - The state object of the current region.\n   * @returns {null} - Tap does not trigger on a move event.\n   */\n  move(inputs, state) {\n    for (var i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() === 'move') {\n        var current = inputs[i].current;\n        var previous = inputs[i].previous;\n        if (!util.isWithin(current.x, current.y, previous.x, previous.y, this.tolerance)) {\n          var type = this.type;\n          inputs.forEach(function (input) {\n            input.resetProgress(type);\n          });\n\n          return null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /*move*/\n\n  /**\n   * Event hook for the end of a gesture.\n   * Determines if this the tap event can be fired if the delay and tolerance\n   * constraints are met. Also waits for all of the inputs to be off the screen before determining\n   * if the gesture is triggered.\n   * @param {Array} inputs - The array of Inputs on the screen.\n   * @returns {null|Object} - null if the gesture is not to be emitted, Object with information\n   * otherwise. Returns the interval time between start and end events.\n   */\n  end(inputs) {\n    if (inputs.length !== this.numInputs) {\n      return null;\n    }\n\n    var startTime = Number.MAX_VALUE;\n    for (var i = 0; i < inputs.length; i++) {\n      if (inputs[i].getCurrentEventType() !== 'end') {\n        return null;\n      }\n\n      var progress = inputs[i].getGestureProgress(this.type);\n      if (!progress.start) {\n        return null;\n      }\n\n      //Find the most recent input's startTime\n      if (progress.start < startTime) {\n        startTime = progress.start;\n      }\n    }\n\n    var interval = new Date().getTime() - startTime;\n    if ((this.minDelay <= interval) && (this.maxDelay >= interval)) {\n      return {\n        interval: interval\n      };\n    } else {\n      let type = this.type;\n      inputs.forEach(function (input) {\n        input.resetProgress(type);\n      });\n\n      return null;\n    }\n  }\n\n  /*end*/\n}\n\nexport default Tap;\n"
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_MIN_DELAY_MS",
    "memberof": "src/gestures/Tap.js",
    "longname": "src/gestures/Tap.js~DEFAULT_MIN_DELAY_MS",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Tap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_MAX_DELAY_MS",
    "memberof": "src/gestures/Tap.js",
    "longname": "src/gestures/Tap.js~DEFAULT_MAX_DELAY_MS",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Tap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_INPUTS",
    "memberof": "src/gestures/Tap.js",
    "longname": "src/gestures/Tap.js~DEFAULT_INPUTS",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Tap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEFAULT_MOVE_PX_TOLERANCE",
    "memberof": "src/gestures/Tap.js",
    "longname": "src/gestures/Tap.js~DEFAULT_MOVE_PX_TOLERANCE",
    "access": null,
    "export": false,
    "importPath": "zingtouch/src/gestures/Tap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Tap",
    "memberof": "src/gestures/Tap.js",
    "longname": "src/gestures/Tap.js~Tap",
    "access": null,
    "export": true,
    "importPath": "zingtouch/src/gestures/Tap.js",
    "importStyle": "Tap",
    "description": "A Tap is defined as a touchstart to touchend event in quick succession.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Tap"
      }
    ],
    "interface": false,
    "extends": [
      "src/gestures/Gesture.js~Gesture"
    ]
  },
  {
    "__docId__": 157,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#constructor",
    "access": null,
    "description": "Constructor function for the Tap class.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options object."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "options.minDelay",
        "description": "The minimum delay between a touchstart and\ntouchend can be configured in milliseconds."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "300",
        "defaultRaw": 300,
        "name": "options.maxDelay",
        "description": "The maximum delay between a touchstart and\ntouchend can be configured in milliseconds."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "options.numInputs",
        "description": "Number of inputs for the Tap gesture."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "options.tolerance",
        "description": "The tolerance in pixels a user can move."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#type",
    "access": null,
    "description": "The type of the Gesture.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "minDelay",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#minDelay",
    "access": null,
    "description": "The minimum amount between a touchstart and a touchend can be configured in milliseconds.\nThe minimum delay starts to count down when the expected number of inputs are on\nthe screen, and ends when ALL inputs are off the screen.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "maxDelay",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#maxDelay",
    "access": null,
    "description": "The maximum delay between a touchstart and touchend can be configured in milliseconds.\nThe maximum delay starts to count down when the expected number of inputs are on\nthe screen, and ends when ALL inputs are off the screen.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "numInputs",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#numInputs",
    "access": null,
    "description": "The number of inputs to trigger a Tap can be variable, and the maximum number being\na factor of the browser.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tolerance",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#tolerance",
    "access": null,
    "description": "A move tolerance in pixels allows some slop between a user's start to end events. This\nallows the Tap gesture to be triggered more easily.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "start",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#start",
    "access": null,
    "description": "Event hook for the start of a gesture. Keeps track of when the inputs trigger the start event.",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null} - Tap does not trigger on a start event."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null"
      ],
      "spread": false,
      "description": "Tap does not trigger on a start event."
    },
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#move",
    "access": null,
    "description": "Event hook for the move of a gesture. The Tap event reaches here if the user\nstarts to move their input\nbefore an 'end' event is reached.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null} - Tap does not trigger on a move event."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object of the current region."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null"
      ],
      "spread": false,
      "description": "Tap does not trigger on a move event."
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "src/gestures/Tap.js~Tap",
    "longname": "src/gestures/Tap.js~Tap#end",
    "access": null,
    "description": "Event hook for the end of a gesture.\nDetermines if this the tap event can be fired if the delay and tolerance\nconstraints are met. Also waits for all of the inputs to be off the screen before determining\nif the gesture is triggered.",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null|Object} - null if the gesture is not to be emitted, Object with information\notherwise. Returns the interval time between start and end events."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "The array of Inputs on the screen."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "Object"
      ],
      "spread": false,
      "description": "null if the gesture is not to be emitted, Object with information\notherwise. Returns the interval time between start and end events."
    },
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 180,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 181,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 191,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 215,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 216,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/ZingTouch.spec.js",
    "memberof": null,
    "longname": "test/ZingTouch.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ZingTouch} from './../src/ZingTouch.js';\n\n/** @test {ZingTouch} */\ndescribe('ZingTouch', function () {\n\n  it('should be instantiated', function () {\n    expect(ZingTouch).to.not.equal(null);\n  });\n\n  it('should have constructors for all of the gestures', function () {\n\n    var gestures = ['Expand', 'Gesture', 'Pan', 'Pinch', 'Rotate', 'Swipe', 'Tap'];\n    for (var key in ZingTouch) {\n      expect(gestures.indexOf(key) !== -1);\n    }\n  });\n\n});\n"
  },
  {
    "__docId__": 224,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "test/ZingTouch.spec.js",
    "testDepth": 0,
    "longname": "test/ZingTouch.spec.js~describe0",
    "access": null,
    "description": "ZingTouch",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ZingTouch}"
      }
    ],
    "testTargets": [
      "ZingTouch"
    ]
  },
  {
    "__docId__": 225,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it1",
    "testId": 1,
    "memberof": "test/ZingTouch.spec.js~describe0",
    "testDepth": 1,
    "longname": "test/ZingTouch.spec.js~describe0.it1",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 6
  },
  {
    "__docId__": 226,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "test/ZingTouch.spec.js~describe0",
    "testDepth": 1,
    "longname": "test/ZingTouch.spec.js~describe0.it2",
    "access": null,
    "description": "should have constructors for all of the gestures",
    "lineNumber": 10
  },
  {
    "__docId__": 227,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/core/classes/Binder.spec.js",
    "memberof": null,
    "longname": "test/core/classes/Binder.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file Binder.js\n * Tests Binder class\n */\nimport Binder from './../../../src/core/classes/Binder.js';\nimport State from './../../../src/core/classes/State.js';\n\n/** @test {Binder} */\ndescribe('Binder', function () {\n  it('should be instantiated', function () {\n    expect(Binder).to.not.equal(null);\n  });\n\n  it('should return a new object with a valid element parameter', function () {\n    var myState = new State();\n    var myBinder = new Binder(document.body, false, myState);\n    expect(myBinder).to.not.equal.null;\n    expect(myBinder.element).to.equal(document.body);\n  });\n\n  it('should return a chainable object with all of the current registered gestures', function () {\n    var myState = new State();\n    var myBinder = new Binder(document.body, false, myState);\n    var gestures = Object.keys(myState.registeredGestures);\n\n    for (var key in myBinder) {\n      if (key !== 'element') {\n        expect(gestures.indexOf(key) >= 0).to.be.true;\n      }\n    }\n  });\n\n});\n\n"
  },
  {
    "__docId__": 228,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe3",
    "testId": 3,
    "memberof": "test/core/classes/Binder.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Binder.spec.js~describe3",
    "access": null,
    "description": "Binder",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Binder}"
      }
    ],
    "testTargets": [
      "Binder"
    ]
  },
  {
    "__docId__": 229,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it4",
    "testId": 4,
    "memberof": "test/core/classes/Binder.spec.js~describe3",
    "testDepth": 1,
    "longname": "test/core/classes/Binder.spec.js~describe3.it4",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 10
  },
  {
    "__docId__": 230,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it5",
    "testId": 5,
    "memberof": "test/core/classes/Binder.spec.js~describe3",
    "testDepth": 1,
    "longname": "test/core/classes/Binder.spec.js~describe3.it5",
    "access": null,
    "description": "should return a new object with a valid element parameter",
    "lineNumber": 14
  },
  {
    "__docId__": 231,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it6",
    "testId": 6,
    "memberof": "test/core/classes/Binder.spec.js~describe3",
    "testDepth": 1,
    "longname": "test/core/classes/Binder.spec.js~describe3.it6",
    "access": null,
    "description": "should return a chainable object with all of the current registered gestures",
    "lineNumber": 21
  },
  {
    "__docId__": 232,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/core/classes/Binding.spec.js",
    "memberof": null,
    "longname": "test/core/classes/Binding.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file Binding.js\n * Tests Binding class\n */\nimport Binding from './../../../src/core/classes/Binding.js';\nimport Gesture from './../../../src/gestures/Gesture.js';\n\n/** @test {Binding} */\ndescribe('Binding', function () {\n  var gesture = new Gesture();\n  var element = document.createElement('div');\n  var binding = new Binding(element, gesture, function () {}, false, false);\n\n  it('should be instantiated', function () {\n    expect(Binding).to.not.equal(null);\n  });\n\n  it('should have an element as a member', function () {\n    expect(binding.element).to.exist;\n  });\n\n  it('should have an Gesture as a member', function () {\n    expect(binding.gesture).to.be.an.instanceof(Gesture);\n  });\n\n  it('should have an function as a member', function () {\n    expect(binding.handler).to.be.an.instanceof(Function);\n  });\n\n});\n"
  },
  {
    "__docId__": 233,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe7",
    "testId": 7,
    "memberof": "test/core/classes/Binding.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Binding.spec.js~describe7",
    "access": null,
    "description": "Binding",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Binding}"
      }
    ],
    "testTargets": [
      "Binding"
    ]
  },
  {
    "__docId__": 234,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it8",
    "testId": 8,
    "memberof": "test/core/classes/Binding.spec.js~describe7",
    "testDepth": 1,
    "longname": "test/core/classes/Binding.spec.js~describe7.it8",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 14
  },
  {
    "__docId__": 235,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "test/core/classes/Binding.spec.js~describe7",
    "testDepth": 1,
    "longname": "test/core/classes/Binding.spec.js~describe7.it9",
    "access": null,
    "description": "should have an element as a member",
    "lineNumber": 18
  },
  {
    "__docId__": 236,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it10",
    "testId": 10,
    "memberof": "test/core/classes/Binding.spec.js~describe7",
    "testDepth": 1,
    "longname": "test/core/classes/Binding.spec.js~describe7.it10",
    "access": null,
    "description": "should have an Gesture as a member",
    "lineNumber": 22
  },
  {
    "__docId__": 237,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it11",
    "testId": 11,
    "memberof": "test/core/classes/Binding.spec.js~describe7",
    "testDepth": 1,
    "longname": "test/core/classes/Binding.spec.js~describe7.it11",
    "access": null,
    "description": "should have an function as a member",
    "lineNumber": 26
  },
  {
    "__docId__": 238,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/core/classes/Input.spec.js",
    "memberof": null,
    "longname": "test/core/classes/Input.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file Binding.js\n * Tests Binding class\n */\nimport Input from './../../../src/core/classes/Input.js';\nimport ZingEvent from './../../../src/core/classes/ZingEvent.js';\n/** @test {Input} */\ndescribe('Input', function () {\n  var event = document.createEvent('Event');\n  var input = new Input(event, 1234);\n\n  it('should be instantiated', function () {\n    expect(Input).to.not.equal(null);\n  });\n\n  it('should have an initial event', function () {\n    expect(input.initial).to.be.an.instanceof(ZingEvent);\n  });\n\n  it('should have an current event', function () {\n    expect(input.current).to.be.an.instanceof(ZingEvent);\n    expect(input.current).to.equal(input.current);\n  });\n\n  it('should have an previous event', function () {\n    expect(input.previous).to.be.an.instanceof(ZingEvent);\n    expect(input.previous).to.equal(input.current);\n  });\n\n});\n\n/** @test {Input.update} */\ndescribe('Input.update', function () {\n  var event = document.createEvent('Event');\n  var input = new Input(event, 1234);\n\n  it('should update the current event', function () {\n    var newEvent = document.createEvent('MouseEvent');\n    input.update(newEvent, 4321);\n    expect(input.previous).to.not.equal(input.current);\n  });\n});\n\n/** @test {Input.getGestureProgress} */\ndescribe('Input.getGestureProgress', function () {\n  var event = document.createEvent('Event');\n  var input = new Input(event, 1234);\n\n  it('should have no progress initially', function () {\n    expect(input.getGestureProgress('tap')).to.be.empty;\n  });\n\n  it('should have be able to store metadata in the progress object.', function () {\n    expect(input.getGestureProgress('tap')).to.be.empty;\n    (input.getGestureProgress('tap')).foo = 8;\n    expect(input.getGestureProgress('tap').foo).to.equal(8);\n  });\n});\n\n/** @test {Input.getCurrentEventType} */\ndescribe('Input.getCurrentEventType', function () {\n\n  it('should be null for an event it does not understand', function () {\n    var event = document.createEvent('Event');\n    var input = new Input(event, 1234);\n    expect(input.getCurrentEventType()).to.be.null;\n  });\n\n  it('should not be null for an event it does understand', function () {\n    var event = document.createEvent('TouchEvent');\n    event.initUIEvent('touchstart', true, true);\n    var touchInput = new Input(event, 1234);\n    expect(touchInput.getCurrentEventType()).to.equal('start');\n  });\n});\n\n/** @test {Input.getCurrentEventType} */\ndescribe('Input.resetProgress', function () {\n  var event = document.createEvent('Event');\n  var input = new Input(event, 1234);\n  it('should reset the progress of an existing progress state', function () {\n    expect(input.getGestureProgress('tap')).to.be.empty;\n    (input.getGestureProgress('tap')).foo = 8;\n    expect(input.getGestureProgress('tap').foo).to.equal(8);\n    input.resetProgress('tap');\n    expect(input.getGestureProgress('tap')).to.be.empty;\n  });\n});\n"
  },
  {
    "__docId__": 239,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe12",
    "testId": 12,
    "memberof": "test/core/classes/Input.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Input.spec.js~describe12",
    "access": null,
    "description": "Input",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Input}"
      }
    ],
    "testTargets": [
      "Input"
    ]
  },
  {
    "__docId__": 240,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it13",
    "testId": 13,
    "memberof": "test/core/classes/Input.spec.js~describe12",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe12.it13",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 12
  },
  {
    "__docId__": 241,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it14",
    "testId": 14,
    "memberof": "test/core/classes/Input.spec.js~describe12",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe12.it14",
    "access": null,
    "description": "should have an initial event",
    "lineNumber": 16
  },
  {
    "__docId__": 242,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it15",
    "testId": 15,
    "memberof": "test/core/classes/Input.spec.js~describe12",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe12.it15",
    "access": null,
    "description": "should have an current event",
    "lineNumber": 20
  },
  {
    "__docId__": 243,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it16",
    "testId": 16,
    "memberof": "test/core/classes/Input.spec.js~describe12",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe12.it16",
    "access": null,
    "description": "should have an previous event",
    "lineNumber": 25
  },
  {
    "__docId__": 244,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe17",
    "testId": 17,
    "memberof": "test/core/classes/Input.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Input.spec.js~describe17",
    "access": null,
    "description": "Input.update",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Input.update}"
      }
    ],
    "testTargets": [
      "Input.update"
    ]
  },
  {
    "__docId__": 245,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it18",
    "testId": 18,
    "memberof": "test/core/classes/Input.spec.js~describe17",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe17.it18",
    "access": null,
    "description": "should update the current event",
    "lineNumber": 37
  },
  {
    "__docId__": 246,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe19",
    "testId": 19,
    "memberof": "test/core/classes/Input.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Input.spec.js~describe19",
    "access": null,
    "description": "Input.getGestureProgress",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Input.getGestureProgress}"
      }
    ],
    "testTargets": [
      "Input.getGestureProgress"
    ]
  },
  {
    "__docId__": 247,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it20",
    "testId": 20,
    "memberof": "test/core/classes/Input.spec.js~describe19",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe19.it20",
    "access": null,
    "description": "should have no progress initially",
    "lineNumber": 49
  },
  {
    "__docId__": 248,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it21",
    "testId": 21,
    "memberof": "test/core/classes/Input.spec.js~describe19",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe19.it21",
    "access": null,
    "description": "should have be able to store metadata in the progress object.",
    "lineNumber": 53
  },
  {
    "__docId__": 249,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe22",
    "testId": 22,
    "memberof": "test/core/classes/Input.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Input.spec.js~describe22",
    "access": null,
    "description": "Input.getCurrentEventType",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Input.getCurrentEventType}"
      }
    ],
    "testTargets": [
      "Input.getCurrentEventType"
    ]
  },
  {
    "__docId__": 250,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "test/core/classes/Input.spec.js~describe22",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe22.it23",
    "access": null,
    "description": "should be null for an event it does not understand",
    "lineNumber": 63
  },
  {
    "__docId__": 251,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it24",
    "testId": 24,
    "memberof": "test/core/classes/Input.spec.js~describe22",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe22.it24",
    "access": null,
    "description": "should not be null for an event it does understand",
    "lineNumber": 69
  },
  {
    "__docId__": 252,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe25",
    "testId": 25,
    "memberof": "test/core/classes/Input.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Input.spec.js~describe25",
    "access": null,
    "description": "Input.resetProgress",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Input.getCurrentEventType}"
      }
    ],
    "testTargets": [
      "Input.getCurrentEventType"
    ]
  },
  {
    "__docId__": 253,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it26",
    "testId": 26,
    "memberof": "test/core/classes/Input.spec.js~describe25",
    "testDepth": 1,
    "longname": "test/core/classes/Input.spec.js~describe25.it26",
    "access": null,
    "description": "should reset the progress of an existing progress state",
    "lineNumber": 81
  },
  {
    "__docId__": 254,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/core/classes/Region.spec.js",
    "memberof": null,
    "longname": "test/core/classes/Region.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file Region.spec..js\n * Tests Region class\n */\nimport Region from './../../../src/core/classes/Region.js';\nimport Binder from './../../../src/core/classes/Binder.js';\n\n/** @test {Region} */\ndescribe('Region', function () {\n  it('should be instantiated', function () {\n    expect(Region).to.not.equal(null);\n  });\n});\n\n/** @test {Region.bind} */\ndescribe('Region.bind(element)', function () {\n  var region = new Region(document.body);\n  it('should exist', function () {\n    expect(region.bind).to.exist;\n  });\n\n  it('should throw an error if the element parameter is invalid', function () {\n    expect(function () {\n      region.bind({});\n    }).to.throw('Bind must contain an element');\n  });\n\n  it('should return a chainable Binder object if only an element parameter is provided', function () {\n    var ztBound = region.bind(document.body);\n    expect(ztBound).to.be.an.instanceof(Binder);\n  });\n\n  it('should return a chainable Binder object that contains all of the registered gestures', function () {\n    var ztBound = region.bind(document.body);\n    var registeredGestures = Object.keys(region.state.registeredGestures);\n    for (var gesture in ztBound) {\n      if (gesture !== 'element') {\n        expect(registeredGestures).to.include(gesture);\n      }\n    }\n  });\n});\n"
  },
  {
    "__docId__": 255,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe27",
    "testId": 27,
    "memberof": "test/core/classes/Region.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Region.spec.js~describe27",
    "access": null,
    "description": "Region",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Region}"
      }
    ],
    "testTargets": [
      "Region"
    ]
  },
  {
    "__docId__": 256,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "test/core/classes/Region.spec.js~describe27",
    "testDepth": 1,
    "longname": "test/core/classes/Region.spec.js~describe27.it28",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 10
  },
  {
    "__docId__": 257,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe29",
    "testId": 29,
    "memberof": "test/core/classes/Region.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/Region.spec.js~describe29",
    "access": null,
    "description": "Region.bind(element)",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Region.bind}"
      }
    ],
    "testTargets": [
      "Region.bind"
    ]
  },
  {
    "__docId__": 258,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it30",
    "testId": 30,
    "memberof": "test/core/classes/Region.spec.js~describe29",
    "testDepth": 1,
    "longname": "test/core/classes/Region.spec.js~describe29.it30",
    "access": null,
    "description": "should exist",
    "lineNumber": 18
  },
  {
    "__docId__": 259,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it31",
    "testId": 31,
    "memberof": "test/core/classes/Region.spec.js~describe29",
    "testDepth": 1,
    "longname": "test/core/classes/Region.spec.js~describe29.it31",
    "access": null,
    "description": "should throw an error if the element parameter is invalid",
    "lineNumber": 22
  },
  {
    "__docId__": 260,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it32",
    "testId": 32,
    "memberof": "test/core/classes/Region.spec.js~describe29",
    "testDepth": 1,
    "longname": "test/core/classes/Region.spec.js~describe29.it32",
    "access": null,
    "description": "should return a chainable Binder object if only an element parameter is provided",
    "lineNumber": 28
  },
  {
    "__docId__": 261,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it33",
    "testId": 33,
    "memberof": "test/core/classes/Region.spec.js~describe29",
    "testDepth": 1,
    "longname": "test/core/classes/Region.spec.js~describe29.it33",
    "access": null,
    "description": "should return a chainable Binder object that contains all of the registered gestures",
    "lineNumber": 33
  },
  {
    "__docId__": 262,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/core/classes/state.spec.js",
    "memberof": null,
    "longname": "test/core/classes/state.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import State from './../../../src/core/classes/State.js';\nimport Gesture from './../../../src/gestures/Gesture.js';\n\n/** @test {State} */\ndescribe('State', function () {\n  var state = new State();\n  it('should be instantiated', function () {\n    expect(state).to.not.equal(null);\n  });\n\n  it('should have no inputs', function () {\n    expect(state.inputs).to.be.empty;\n  });\n\n  it('should have no bindings', function () {\n    expect(state.bindings).to.be.empty;\n  });\n\n  it('should have instances of the 6 default gestures', function () {\n    var gestures = ['expand', 'pan', 'pinch', 'rotate', 'swipe', 'tap'];\n    for (var i = 0; i < state.registeredGestures.length; i++) {\n      expect(gestures.indexOf(state.registeredGestures[i].type)).to.not.equal(-1);\n    }\n  });\n});\n\n/** @test {State.addBinding} */\ndescribe('State.addBinding', function () {\n\n  it('should add a binding to a registered gesture', function () {\n    var state = new State();\n    state.addBinding(document.body, 'tap', function () {}, false, false);\n\n    expect(state.bindings.length).to.equal(1);\n  });\n\n  it('should add a binding to a gesture instance', function () {\n    var state = new State();\n    state.addBinding(document.body, new Gesture(), function () {}, false, false);\n\n    expect(state.bindings.length).to.equal(1);\n  });\n\n  it('should not add a binding to a non-registered gesture', function () {\n    expect(function () {\n      var state = new State();\n      state.addBinding(document.body, 'foobar', function () {}, false, false);\n    }).to.throw('Parameter foobar is not a registered gesture');\n  });\n\n  it('should not add a binding to an object not of the Gesture type', function () {\n    expect(function () {\n      var state = new State();\n      state.addBinding(document.body, {}, function () {}, false, false);\n    }).to.throw('Parameter for the gesture is not of a Gesture type');\n  });\n\n  //it('should not add a binding to an object not of the Gesture type', function () {\n  //  var state = new State();\n  //  expect(state.addBinding(document.body, {}, function () {}, false, false)).to.be.null;\n  //});\n\n});\n\n/** @test {State.retrieveBindings} */\ndescribe('State.retrieveBindings', function () {\n  var state = new State();\n  state.addBinding(document.body, 'tap', function () {}, false, false);\n\n  it('should retrieve no bindings for elements without any', function () {\n    expect(state.retrieveBindingsByElement(document)).to.be.empty;\n  });\n\n  it('should retrieve bindings for elements that are bound', function () {\n    expect(state.retrieveBindingsByElement(document.body)).to.not.be.empty;\n  });\n});\n"
  },
  {
    "__docId__": 263,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe34",
    "testId": 34,
    "memberof": "test/core/classes/state.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/state.spec.js~describe34",
    "access": null,
    "description": "State",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{State}"
      }
    ],
    "testTargets": [
      "State"
    ]
  },
  {
    "__docId__": 264,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it35",
    "testId": 35,
    "memberof": "test/core/classes/state.spec.js~describe34",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe34.it35",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 7
  },
  {
    "__docId__": 265,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it36",
    "testId": 36,
    "memberof": "test/core/classes/state.spec.js~describe34",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe34.it36",
    "access": null,
    "description": "should have no inputs",
    "lineNumber": 11
  },
  {
    "__docId__": 266,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it37",
    "testId": 37,
    "memberof": "test/core/classes/state.spec.js~describe34",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe34.it37",
    "access": null,
    "description": "should have no bindings",
    "lineNumber": 15
  },
  {
    "__docId__": 267,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it38",
    "testId": 38,
    "memberof": "test/core/classes/state.spec.js~describe34",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe34.it38",
    "access": null,
    "description": "should have instances of the 6 default gestures",
    "lineNumber": 19
  },
  {
    "__docId__": 268,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe39",
    "testId": 39,
    "memberof": "test/core/classes/state.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/state.spec.js~describe39",
    "access": null,
    "description": "State.addBinding",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{State.addBinding}"
      }
    ],
    "testTargets": [
      "State.addBinding"
    ]
  },
  {
    "__docId__": 269,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it40",
    "testId": 40,
    "memberof": "test/core/classes/state.spec.js~describe39",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe39.it40",
    "access": null,
    "description": "should add a binding to a registered gesture",
    "lineNumber": 30
  },
  {
    "__docId__": 270,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it41",
    "testId": 41,
    "memberof": "test/core/classes/state.spec.js~describe39",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe39.it41",
    "access": null,
    "description": "should add a binding to a gesture instance",
    "lineNumber": 37
  },
  {
    "__docId__": 271,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it42",
    "testId": 42,
    "memberof": "test/core/classes/state.spec.js~describe39",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe39.it42",
    "access": null,
    "description": "should not add a binding to a non-registered gesture",
    "lineNumber": 44
  },
  {
    "__docId__": 272,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it43",
    "testId": 43,
    "memberof": "test/core/classes/state.spec.js~describe39",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe39.it43",
    "access": null,
    "description": "should not add a binding to an object not of the Gesture type",
    "lineNumber": 51
  },
  {
    "__docId__": 273,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe44",
    "testId": 44,
    "memberof": "test/core/classes/state.spec.js",
    "testDepth": 0,
    "longname": "test/core/classes/state.spec.js~describe44",
    "access": null,
    "description": "State.retrieveBindings",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{State.retrieveBindings}"
      }
    ],
    "testTargets": [
      "State.retrieveBindings"
    ]
  },
  {
    "__docId__": 274,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it45",
    "testId": 45,
    "memberof": "test/core/classes/state.spec.js~describe44",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe44.it45",
    "access": null,
    "description": "should retrieve no bindings for elements without any",
    "lineNumber": 70
  },
  {
    "__docId__": 275,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it46",
    "testId": 46,
    "memberof": "test/core/classes/state.spec.js~describe44",
    "testDepth": 1,
    "longname": "test/core/classes/state.spec.js~describe44.it46",
    "access": null,
    "description": "should retrieve bindings for elements that are bound",
    "lineNumber": 74
  },
  {
    "__docId__": 276,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/core/util.spec.js",
    "memberof": null,
    "longname": "test/core/util.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * @file utils.js\n * Tests the user-facing API, ensuring the object functions while not exposing private members.\n */\n\nimport util from './../../src/core/util.js';\n\n/** @test {util} */\ndescribe('util', function () {\n  it('should be instantiated', function () {\n    expect(util).to.not.equal(null);\n  });\n});\n\n/** @test {util.normalizeEvent} */\ndescribe('util.normalizeEvent', function () {\n  it('should expect to emit start', function () {\n    expect(util.normalizeEvent('mousedown')).to.equal('start');\n    expect(util.normalizeEvent('touchstart')).to.equal('start');\n  });\n\n  it('should expect to emit move', function () {\n    expect(util.normalizeEvent('mousemove')).to.equal('move');\n    expect(util.normalizeEvent('touchmove')).to.equal('move');\n  });\n\n  it('should expect to emit end', function () {\n    expect(util.normalizeEvent('mouseup')).to.equal('end');\n    expect(util.normalizeEvent('touchend')).to.equal('end');\n  });\n\n  it('should expect to emit null for unknown events', function () {\n    expect(util.normalizeEvent('foobar')).to.be.null;\n  });\n});\n\n/** @test {util.isWithin} */\ndescribe('util.isWithin', function () {\n\n  it('should expect be true when points are within a tolerance', function () {\n    expect(util.isWithin(0, 0, 0, 0, 10)).to.be.true;\n    expect(util.isWithin(10, 10, 10, 10, 0)).to.be.true;\n    expect(util.isWithin(0, -10, 9, 0, 10)).to.be.true;\n  });\n\n  it('should expect be false when points are outside a tolerance', function () {\n    expect(util.isWithin(0, 0, 0, 0, -1)).to.be.false;\n    expect(util.isWithin(10, 10, 20, 20, 0)).to.be.false;\n  });\n});\n\n/** @test {util.distanceBetweenTwoPoints} */\ndescribe('util.distanceBetweenTwoPoints', function () {\n  it('should return a distance of 5', function () {\n    expect(util.distanceBetweenTwoPoints(0, 4, 0, 3)).to.equal(5);\n  });\n\n  it('should return a distance of 0', function () {\n    expect(util.distanceBetweenTwoPoints(0, 0, 0, 0)).to.equal(0);\n  });\n\n  it('should return a distance of 0', function () {\n    expect(util.distanceBetweenTwoPoints('foo', 0, 0, 0)).to.be.NaN;\n  });\n});\n\n/** @test {util.getAngle} */\ndescribe('util.getAngle', function () {\n\n  it('should return an angle of 45', function () {\n    expect(util.getAngle(0, 0, 3, 3)).to.equal(315);\n  });\n\n  it('should return an angle of 360', function () {\n    expect(util.getAngle(0, 0, 0, 0)).to.equal(360);\n  });\n\n  it('should return an angle of 180', function () {\n    expect(util.getAngle(0, 0, -3, 0)).to.equal(180);\n  });\n});\n\n/** @test {util.getAngularDistance} */\ndescribe('util.getAngularDistance', function () {\n\n  it('should return an angle of 45', function () {\n    expect(util.getAngularDistance(270, 360)).to.equal(-90);\n  });\n\n  it('should return an angle of -15', function () {\n    expect(util.getAngularDistance(5, 350)).to.equal(-15);\n  });\n\n  it('should return an angle of +15', function () {\n    expect(util.getAngularDistance(350, 5)).to.equal(15);\n  });\n\n  it('should return an angle of 0', function () {\n    expect(util.getAngularDistance(360, 360)).to.equal(0);\n  });\n});\n"
  },
  {
    "__docId__": 277,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe47",
    "testId": 47,
    "memberof": "test/core/util.spec.js",
    "testDepth": 0,
    "longname": "test/core/util.spec.js~describe47",
    "access": null,
    "description": "util",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{util}"
      }
    ],
    "testTargets": [
      "util"
    ]
  },
  {
    "__docId__": 278,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "test/core/util.spec.js~describe47",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe47.it48",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 10
  },
  {
    "__docId__": 279,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe49",
    "testId": 49,
    "memberof": "test/core/util.spec.js",
    "testDepth": 0,
    "longname": "test/core/util.spec.js~describe49",
    "access": null,
    "description": "util.normalizeEvent",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{util.normalizeEvent}"
      }
    ],
    "testTargets": [
      "util.normalizeEvent"
    ]
  },
  {
    "__docId__": 280,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it50",
    "testId": 50,
    "memberof": "test/core/util.spec.js~describe49",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe49.it50",
    "access": null,
    "description": "should expect to emit start",
    "lineNumber": 17
  },
  {
    "__docId__": 281,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it51",
    "testId": 51,
    "memberof": "test/core/util.spec.js~describe49",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe49.it51",
    "access": null,
    "description": "should expect to emit move",
    "lineNumber": 22
  },
  {
    "__docId__": 282,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "test/core/util.spec.js~describe49",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe49.it52",
    "access": null,
    "description": "should expect to emit end",
    "lineNumber": 27
  },
  {
    "__docId__": 283,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it53",
    "testId": 53,
    "memberof": "test/core/util.spec.js~describe49",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe49.it53",
    "access": null,
    "description": "should expect to emit null for unknown events",
    "lineNumber": 32
  },
  {
    "__docId__": 284,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe54",
    "testId": 54,
    "memberof": "test/core/util.spec.js",
    "testDepth": 0,
    "longname": "test/core/util.spec.js~describe54",
    "access": null,
    "description": "util.isWithin",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{util.isWithin}"
      }
    ],
    "testTargets": [
      "util.isWithin"
    ]
  },
  {
    "__docId__": 285,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it55",
    "testId": 55,
    "memberof": "test/core/util.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe54.it55",
    "access": null,
    "description": "should expect be true when points are within a tolerance",
    "lineNumber": 40
  },
  {
    "__docId__": 286,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it56",
    "testId": 56,
    "memberof": "test/core/util.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe54.it56",
    "access": null,
    "description": "should expect be false when points are outside a tolerance",
    "lineNumber": 46
  },
  {
    "__docId__": 287,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe57",
    "testId": 57,
    "memberof": "test/core/util.spec.js",
    "testDepth": 0,
    "longname": "test/core/util.spec.js~describe57",
    "access": null,
    "description": "util.distanceBetweenTwoPoints",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{util.distanceBetweenTwoPoints}"
      }
    ],
    "testTargets": [
      "util.distanceBetweenTwoPoints"
    ]
  },
  {
    "__docId__": 288,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it58",
    "testId": 58,
    "memberof": "test/core/util.spec.js~describe57",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe57.it58",
    "access": null,
    "description": "should return a distance of 5",
    "lineNumber": 54
  },
  {
    "__docId__": 289,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "test/core/util.spec.js~describe57",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe57.it59",
    "access": null,
    "description": "should return a distance of 0",
    "lineNumber": 58
  },
  {
    "__docId__": 290,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it60",
    "testId": 60,
    "memberof": "test/core/util.spec.js~describe57",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe57.it60",
    "access": null,
    "description": "should return a distance of 0",
    "lineNumber": 62
  },
  {
    "__docId__": 291,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe61",
    "testId": 61,
    "memberof": "test/core/util.spec.js",
    "testDepth": 0,
    "longname": "test/core/util.spec.js~describe61",
    "access": null,
    "description": "util.getAngle",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{util.getAngle}"
      }
    ],
    "testTargets": [
      "util.getAngle"
    ]
  },
  {
    "__docId__": 292,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "test/core/util.spec.js~describe61",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe61.it62",
    "access": null,
    "description": "should return an angle of 45",
    "lineNumber": 70
  },
  {
    "__docId__": 293,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it63",
    "testId": 63,
    "memberof": "test/core/util.spec.js~describe61",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe61.it63",
    "access": null,
    "description": "should return an angle of 360",
    "lineNumber": 74
  },
  {
    "__docId__": 294,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it64",
    "testId": 64,
    "memberof": "test/core/util.spec.js~describe61",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe61.it64",
    "access": null,
    "description": "should return an angle of 180",
    "lineNumber": 78
  },
  {
    "__docId__": 295,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe65",
    "testId": 65,
    "memberof": "test/core/util.spec.js",
    "testDepth": 0,
    "longname": "test/core/util.spec.js~describe65",
    "access": null,
    "description": "util.getAngularDistance",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{util.getAngularDistance}"
      }
    ],
    "testTargets": [
      "util.getAngularDistance"
    ]
  },
  {
    "__docId__": 296,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it66",
    "testId": 66,
    "memberof": "test/core/util.spec.js~describe65",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe65.it66",
    "access": null,
    "description": "should return an angle of 45",
    "lineNumber": 86
  },
  {
    "__docId__": 297,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it67",
    "testId": 67,
    "memberof": "test/core/util.spec.js~describe65",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe65.it67",
    "access": null,
    "description": "should return an angle of -15",
    "lineNumber": 90
  },
  {
    "__docId__": 298,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it68",
    "testId": 68,
    "memberof": "test/core/util.spec.js~describe65",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe65.it68",
    "access": null,
    "description": "should return an angle of +15",
    "lineNumber": 94
  },
  {
    "__docId__": 299,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it69",
    "testId": 69,
    "memberof": "test/core/util.spec.js~describe65",
    "testDepth": 1,
    "longname": "test/core/util.spec.js~describe65.it69",
    "access": null,
    "description": "should return an angle of 0",
    "lineNumber": 98
  },
  {
    "__docId__": 300,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/gestures/Gesture.spec.js",
    "memberof": null,
    "longname": "test/gestures/Gesture.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file Gesture.js\n * Tests Gesture class\n */\nimport Gesture from './../../src/gestures/Gesture.js';\n\n/** @test {Gesture} */\ndescribe('Gesture', function () {\n  it('should be instantiated', function () {\n    expect(Gesture).to.not.equal(null);\n  });\n});\n\n/** @test {Gesture.getType} */\ndescribe('Gesture.getType', function () {\n  it('should return null for a generic gesture', function () {\n    var _gesture = new Gesture();\n    expect(_gesture.getType()).to.equal(null);\n  });\n});\n\n"
  },
  {
    "__docId__": 301,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe70",
    "testId": 70,
    "memberof": "test/gestures/Gesture.spec.js",
    "testDepth": 0,
    "longname": "test/gestures/Gesture.spec.js~describe70",
    "access": null,
    "description": "Gesture",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Gesture}"
      }
    ],
    "testTargets": [
      "Gesture"
    ]
  },
  {
    "__docId__": 302,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it71",
    "testId": 71,
    "memberof": "test/gestures/Gesture.spec.js~describe70",
    "testDepth": 1,
    "longname": "test/gestures/Gesture.spec.js~describe70.it71",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 9
  },
  {
    "__docId__": 303,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe72",
    "testId": 72,
    "memberof": "test/gestures/Gesture.spec.js",
    "testDepth": 0,
    "longname": "test/gestures/Gesture.spec.js~describe72",
    "access": null,
    "description": "Gesture.getType",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Gesture.getType}"
      }
    ],
    "testTargets": [
      "Gesture.getType"
    ]
  },
  {
    "__docId__": 304,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it73",
    "testId": 73,
    "memberof": "test/gestures/Gesture.spec.js~describe72",
    "testDepth": 1,
    "longname": "test/gestures/Gesture.spec.js~describe72.it73",
    "access": null,
    "description": "should return null for a generic gesture",
    "lineNumber": 16
  },
  {
    "__docId__": 305,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/gestures/Tap.spec.js",
    "memberof": null,
    "longname": "test/gestures/Tap.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * @file Tap.js\n * Tests Tap class\n */\nimport Tap from './../../src/gestures/Tap.js';\n\n/** @test {Tap} */\ndescribe('Tap', function () {\n  it('should be instantiated', function () {\n    expect(Tap).to.not.equal(null);\n  });\n\n  it('should return a Tap object.', function () {\n    let _tap = new Tap();\n    expect(_tap instanceof Tap).to.be.true;\n  });\n\n  it('should return accept delay and number of inputs as parameters', function () {\n    let _tap = new Tap({\n      maxDelay:  2000,\n      numInputs: 2\n    });\n    expect(_tap.maxDelay).to.equal(2000);\n    expect(_tap.numInputs).to.equal(2);\n  });\n});\n"
  },
  {
    "__docId__": 306,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe74",
    "testId": 74,
    "memberof": "test/gestures/Tap.spec.js",
    "testDepth": 0,
    "longname": "test/gestures/Tap.spec.js~describe74",
    "access": null,
    "description": "Tap",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{Tap}"
      }
    ],
    "testTargets": [
      "Tap"
    ]
  },
  {
    "__docId__": 307,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it75",
    "testId": 75,
    "memberof": "test/gestures/Tap.spec.js~describe74",
    "testDepth": 1,
    "longname": "test/gestures/Tap.spec.js~describe74.it75",
    "access": null,
    "description": "should be instantiated",
    "lineNumber": 9
  },
  {
    "__docId__": 308,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it76",
    "testId": 76,
    "memberof": "test/gestures/Tap.spec.js~describe74",
    "testDepth": 1,
    "longname": "test/gestures/Tap.spec.js~describe74.it76",
    "access": null,
    "description": "should return a Tap object.",
    "lineNumber": 13
  },
  {
    "__docId__": 309,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it77",
    "testId": 77,
    "memberof": "test/gestures/Tap.spec.js~describe74",
    "testDepth": 1,
    "longname": "test/gestures/Tap.spec.js~describe74.it77",
    "access": null,
    "description": "should return accept delay and number of inputs as parameters",
    "lineNumber": 18
  }
]